<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddPartnerCustomerCartLineItemWhatIf" xml:space="preserve">
    <value>Adds a new line item to the cart with the identifier of {0}.</value>
  </data>
  <data name="AssertNumberPositiveInvalidError" xml:space="preserve">
    <value>{0} must be greater than zero</value>
  </data>
  <data name="AssertNumberPositiveInvalidPrefix" xml:space="preserve">
    <value>number</value>
  </data>
  <data name="AssertStringNotEmptyInvalidError" xml:space="preserve">
    <value>{0} is not set</value>
  </data>
  <data name="AssertStringNotEmptyInvalidPrefix" xml:space="preserve">
    <value>string</value>
  </data>
  <data name="AuditRecordDateError" xml:space="preserve">
    <value>Audit records are only available for the past 90 days. Please update the start date parameter and try again.</value>
  </data>
  <data name="AuthenticateAccessTokenTrace" xml:space="preserve">
    <value>Authenticating using an access token. The following configurations were extracted from the token: Expiration '{0}', TenantId '{1}', UniqueName {2}, UserId '{3}'.</value>
  </data>
  <data name="AuthenticateAuthorizationCodeTrace" xml:space="preserve">
    <value>Authenticating using an authorization code and the following configurations: ClientId '{0}', Endpoint '{1}', RedirectUri '{2}' Resource '{3}'.</value>
  </data>
  <data name="AuthenticateDeviceCodeTrace" xml:space="preserve">
    <value>Authenticating using a device code and the following configurations: ClientId '{0}', Resource '{1}'.</value>
  </data>
  <data name="AuthenticateServicePrincipalTrace" xml:space="preserve">
    <value>Authenticating using a service principal and the following configurations: ClientId '{0}', Endpoint '{1}', Resource '{2}' TenantId '{3}'.</value>
  </data>
  <data name="AuthenticateSilentTrace" xml:space="preserve">
    <value>Authenticating without asking for user credentials and using the following configurations: ClientId '{0}', Endpoint '{1}', Resource '{2}', UserId '{3}'.</value>
  </data>
  <data name="AuthenticationTokenExpired" xml:space="preserve">
    <value>The authentication token has expired.</value>
  </data>
  <data name="AuthenticationTypeNotSupportedException" xml:space="preserve">
    <value>You have authenticated using {0} authentication. This type of authentication is not supported by this command, only {1} authentication is supported. Please establish a new connection using an alternative means of authentication.</value>
  </data>
  <data name="BreakingChangesAttributesChangeDescriptionMessage" xml:space="preserve">
    <value>Change description : {0}</value>
  </data>
  <data name="BreakingChangesAttributesDeclarationMessage" xml:space="preserve">
    <value>- {0}
</value>
  </data>
  <data name="BreakingChangesAttributesDeclarationMessageWithCmdletName" xml:space="preserve">
    <value>- Cmdlet : '{0}'
 - {1}</value>
  </data>
  <data name="BreakingChangesAttributesFooterMessage" xml:space="preserve">
    <value>NOTE : Go to {0} for steps to suppress this breaking change warning, and other information on breaking changes with the Partner Center PowerShell module.</value>
  </data>
  <data name="BreakingChangesAttributesHeaderMessage" xml:space="preserve">
    <value>Breaking changes in the cmdlet '{0}' :</value>
  </data>
  <data name="BreakingChangesAttributesInEffectByDateMessage" xml:space="preserve">
    <value>Note : This change will take effect on '{0}'</value>
  </data>
  <data name="BreakingChangesAttributesInEffectByVersion" xml:space="preserve">
    <value>Note: The change is expected to take effect from the version '{0}'
</value>
  </data>
  <data name="BreakingChangesAttributesUsageChangeMessageConsole" xml:space="preserve">
    <value>Cmdlet invocation changes :
	Old Way : {0}
	New Way : {1}</value>
  </data>
  <data name="CheckoutPartnerCustomerCartWhatIf" xml:space="preserve">
    <value>Checks out the cart with the identifier of {0}.</value>
  </data>
  <data name="CityRequiredError" xml:space="preserve">
    <value>City is a required feild. Please update the input and try again.</value>
  </data>
  <data name="ConnectPartnerCenterBeginProcess" xml:space="preserve">
    <value>Connect-PartnerCenter begin processing with ParameterSet '{0}'.</value>
  </data>
  <data name="DisconnectWhatIf" xml:space="preserve">
    <value>Disconnects the current session from Partner Center.</value>
  </data>
  <data name="DomainExistsError" xml:space="preserve">
    <value>The domain {0} already exists. Please modify the domain value and try again.</value>
  </data>
  <data name="InvalidEnvironmentException" xml:space="preserve">
    <value>An invalid environment name was specified.</value>
  </data>
  <data name="InvalidPhoneFormatError" xml:space="preserve">
    <value>{0} is not a valid phone number format. Please update the input and try again.</value>
  </data>
  <data name="InvalidSetCustomerIdentifierException" xml:space="preserve">
    <value>The CustomerId parameter must be set or a customer object must be passed from the pipeline.</value>
  </data>
  <data name="InvalidSetCustomerUserIdentifierException" xml:space="preserve">
    <value>The UserId parameter must be set or a customer user object must be passed from the pipeline.</value>
  </data>
  <data name="InvalidStateError" xml:space="preserve">
    <value>{0} is not valid entry for the state field. The valid values are {1}. Please update the input and try again.</value>
  </data>
  <data name="NewCartWhatIf" xml:space="preserve">
    <value>Creates a new cart for the customer with the identifier of {0}.</value>
  </data>
  <data name="NewCustomerAgreementInvalidOperationMessage" xml:space="preserve">
    <value>It appears you are using app only authentication and you did not specify the UserId parameter. Please specify the UserId parameter and try again.</value>
  </data>
  <data name="NewPartnerCustomerAgreementWhatIf" xml:space="preserve">
    <value>Accepts the specified agreement for the customer.</value>
  </data>
  <data name="NewPartnerCustomerCartLineItemWhatIf" xml:space="preserve">
    <value>Creates a new line item associated with the specified cart.</value>
  </data>
  <data name="NewPartnerCustomerConfigurationPolicyWhatIf" xml:space="preserve">
    <value>Creates a new customer configuration policy.</value>
  </data>
  <data name="NewPartnerCustomerDeviceBatchWhatIf" xml:space="preserve">
    <value>Creates a batch of devices with the identifier of {0}.</value>
  </data>
  <data name="NewPartnerCustomerOrderLineItemWhatIf" xml:space="preserve">
    <value>Creates a new customer order line item in memory.</value>
  </data>
  <data name="NewPartnerCustomerUserWhatIf" xml:space="preserve">
    <value>Creates a new customer user with the user principal name of {0}.</value>
  </data>
  <data name="NewPartnerCustomerWhatIf" xml:space="preserve">
    <value>Creates a new {0} as a new customer.</value>
  </data>
  <data name="NewPartnerServiceRequestWhatIf" xml:space="preserve">
    <value>Create a new partner service request.</value>
  </data>
  <data name="PostalCoderequiredError" xml:space="preserve">
    <value>Postal code is a required field. Please update the input and try again.</value>
  </data>
  <data name="RemovePartnerCustomerConfigurationPolicyWhatIf" xml:space="preserve">
    <value>Removes the configuration policy with the identifer of {0}.</value>
  </data>
  <data name="RemovePartnerCustomerUserWhatIf" xml:space="preserve">
    <value>Deletes the customer user account with the identifier of {0}.</value>
  </data>
  <data name="RemovePartnerResellerRelationshipWhatIf" xml:space="preserve">
    <value>Removes the relationship between the customer with the identifier of {0} and the partner. This operation will suspend all active subscriptions.</value>
  </data>
  <data name="RemovePartnerSandboxCustomerWhatIf" xml:space="preserve">
    <value>Deletes the customer with the identifier of {0} from the integration sandbox.</value>
  </data>
  <data name="RestorePartnerCustomerUserWhatIf" xml:space="preserve">
    <value>Restores the customer user account with the identifier of {0}.</value>
  </data>
  <data name="RunConnectPartnerCenter" xml:space="preserve">
    <value>Run Connect-PartnerCenter to login.</value>
  </data>
  <data name="SetPartnerCustomerCartWhatIf" xml:space="preserve">
    <value>Updates the cart with the identifier of {0}.</value>
  </data>
  <data name="SetPartnerCustomerConfigurationPolicyWhatIf" xml:space="preserve">
    <value>Updates the configuration policy with the identifer of {0}.</value>
  </data>
  <data name="SetPartnerCustomerSubscriptionSupportContactWhatIf" xml:space="preserve">
    <value>Updates the support contact for the subscription with the identifier of {0}.</value>
  </data>
  <data name="SetPartnerCustomerSubscriptionWhatIf" xml:space="preserve">
    <value>Updates the subscription {0} that belongs to the customer with the identifier of {1}.</value>
  </data>
  <data name="SetPartnerCustomerUserLicenseWhatIf" xml:space="preserve">
    <value>Updates the license assignment for the user with the identifier of {0}.</value>
  </data>
  <data name="SetPartnerCustomerUserWhatIf" xml:space="preserve">
    <value>Updates the specified customer user information for a user with the identifier of {0}.</value>
  </data>
  <data name="SetPartnerCustomerWhatIf" xml:space="preserve">
    <value>Updates the billing profile for {0}.</value>
  </data>
  <data name="SetPartnerLegalProfileWhatIf" xml:space="preserve">
    <value>Updates the partner's legal business profile.</value>
  </data>
  <data name="SetPartnerServiceRequestWhatIf" xml:space="preserve">
    <value>Updates the service request with the identifier of {0}.</value>
  </data>
  <data name="StateRequiredError" xml:space="preserve">
    <value>State is a required feild. Please update the input and try again.</value>
  </data>
  <data name="SubscriptionRegistrationWhatIf" xml:space="preserve">
    <value>Registers the subscription {0} owned by the customer with the identifier of {1}.</value>
  </data>
</root>