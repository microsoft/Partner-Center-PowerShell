// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MicrosoftgraphmanagedDevice
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphmanagedDevice
        /// class.
        /// </summary>
        public MicrosoftgraphmanagedDevice()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphmanagedDevice
        /// class.
        /// </summary>
        /// <param name="userId">Unique Identifier for the user associated with
        /// the device. This property is read-only.</param>
        /// <param name="deviceName">Name of the device. This property is
        /// read-only.</param>
        /// <param name="ownerType">Possible values include: 'unknown',
        /// 'company', 'personal'</param>
        /// <param name="managedDeviceOwnerType">Possible values include:
        /// 'unknown', 'company', 'personal'</param>
        /// <param name="deviceActionResults">List of ComplexType
        /// deviceActionResult objects. This property is read-only.</param>
        /// <param name="managementState">Possible values include: 'managed',
        /// 'retirePending', 'retireFailed', 'wipePending', 'wipeFailed',
        /// 'unhealthy', 'deletePending', 'retireIssued', 'wipeIssued',
        /// 'wipeCanceled', 'retireCanceled', 'discovered'</param>
        /// <param name="enrolledDateTime">Enrollment time of the device. This
        /// property is read-only.</param>
        /// <param name="lastSyncDateTime">The date and time that the device
        /// last completed a successful sync with Intune. This property is
        /// read-only.</param>
        /// <param name="chassisType">Possible values include: 'unknown',
        /// 'desktop', 'laptop', 'worksWorkstation', 'enterpriseServer',
        /// 'phone', 'tablet', 'mobileOther', 'mobileUnknown'</param>
        /// <param name="operatingSystem">Operating system of the device.
        /// Windows, iOS, etc. This property is read-only.</param>
        /// <param name="deviceType">Possible values include: 'desktop',
        /// 'windowsRT', 'winMO6', 'nokia', 'windowsPhone', 'mac', 'winCE',
        /// 'winEmbedded', 'iPhone', 'iPad', 'iPod', 'android', 'iSocConsumer',
        /// 'unix', 'macMDM', 'holoLens', 'surfaceHub', 'androidForWork',
        /// 'androidEnterprise', 'blackberry', 'palm', 'unknown'</param>
        /// <param name="complianceState">Possible values include: 'unknown',
        /// 'compliant', 'noncompliant', 'conflict', 'error', 'inGracePeriod',
        /// 'configManager'</param>
        /// <param name="jailBroken">whether the device is jail broken or
        /// rooted. This property is read-only.</param>
        /// <param name="managementAgent">Possible values include: 'eas',
        /// 'mdm', 'easMdm', 'intuneClient', 'easIntuneClient',
        /// 'configurationManagerClient', 'configurationManagerClientMdm',
        /// 'configurationManagerClientMdmEas', 'unknown', 'jamf',
        /// 'googleCloudDevicePolicyController',
        /// 'microsoft365ManagedMdm'</param>
        /// <param name="osVersion">Operating system version of the device.
        /// This property is read-only.</param>
        /// <param name="easActivated">Whether the device is Exchange
        /// ActiveSync activated. This property is read-only.</param>
        /// <param name="easDeviceId">Exchange ActiveSync Id of the device.
        /// This property is read-only.</param>
        /// <param name="easActivationDateTime">Exchange ActivationSync
        /// activation time of the device. This property is read-only.</param>
        /// <param name="aadRegistered">Whether the device is Azure Active
        /// Directory registered. This property is read-only.</param>
        /// <param name="azureADRegistered">Whether the device is Azure Active
        /// Directory registered. This property is read-only.</param>
        /// <param name="deviceEnrollmentType">Possible values include:
        /// 'unknown', 'userEnrollment', 'deviceEnrollmentManager',
        /// 'appleBulkWithUser', 'appleBulkWithoutUser', 'windowsAzureADJoin',
        /// 'windowsBulkUserless', 'windowsAutoEnrollment',
        /// 'windowsBulkAzureDomainJoin', 'windowsCoManagement',
        /// 'appleUserEnrollment',
        /// 'appleUserEnrollmentWithServiceAccount'</param>
        /// <param name="lostModeState">Possible values include: 'disabled',
        /// 'enabled'</param>
        /// <param name="activationLockBypassCode">Code that allows the
        /// Activation Lock on a device to be bypassed. This property is
        /// read-only.</param>
        /// <param name="emailAddress">Email(s) for the user associated with
        /// the device. This property is read-only.</param>
        /// <param name="azureActiveDirectoryDeviceId">The unique identifier
        /// for the Azure Active Directory device. Read only. This property is
        /// read-only.</param>
        /// <param name="azureADDeviceId">The unique identifier for the Azure
        /// Active Directory device. Read only. This property is
        /// read-only.</param>
        /// <param name="deviceRegistrationState">Possible values include:
        /// 'notRegistered', 'registered', 'revoked', 'keyConflict',
        /// 'approvalPending', 'certificateReset',
        /// 'notRegisteredPendingEnrollment', 'unknown'</param>
        /// <param name="deviceCategoryDisplayName">Device category display
        /// name. This property is read-only.</param>
        /// <param name="isSupervised">Device supervised status. This property
        /// is read-only.</param>
        /// <param name="exchangeLastSuccessfulSyncDateTime">Last time the
        /// device contacted Exchange. This property is read-only.</param>
        /// <param name="exchangeAccessState">Possible values include: 'none',
        /// 'unknown', 'allowed', 'blocked', 'quarantined'</param>
        /// <param name="exchangeAccessStateReason">Possible values include:
        /// 'none', 'unknown', 'exchangeGlobalRule', 'exchangeIndividualRule',
        /// 'exchangeDeviceRule', 'exchangeUpgrade', 'exchangeMailboxPolicy',
        /// 'other', 'compliant', 'notCompliant', 'notEnrolled',
        /// 'unknownLocation', 'mfaRequired', 'azureADBlockDueToAccessPolicy',
        /// 'compromisedPassword', 'deviceNotKnownWithManagedApp'</param>
        /// <param name="remoteAssistanceSessionUrl">Url that allows a Remote
        /// Assistance session to be established with the device. This property
        /// is read-only.</param>
        /// <param name="remoteAssistanceSessionErrorDetails">An error string
        /// that identifies issues when creating Remote Assistance session
        /// objects. This property is read-only.</param>
        /// <param name="isEncrypted">Device encryption status. This property
        /// is read-only.</param>
        /// <param name="userPrincipalName">Device user principal name. This
        /// property is read-only.</param>
        /// <param name="model">Model of the device. This property is
        /// read-only.</param>
        /// <param name="manufacturer">Manufacturer of the device. This
        /// property is read-only.</param>
        /// <param name="imei">IMEI. This property is read-only.</param>
        /// <param name="complianceGracePeriodExpirationDateTime">The DateTime
        /// when device compliance grace period expires. This property is
        /// read-only.</param>
        /// <param name="serialNumber">SerialNumber. This property is
        /// read-only.</param>
        /// <param name="phoneNumber">Phone number of the device. This property
        /// is read-only.</param>
        /// <param name="androidSecurityPatchLevel">Android security patch
        /// level. This property is read-only.</param>
        /// <param name="userDisplayName">User display name. This property is
        /// read-only.</param>
        /// <param name="wiFiMacAddress">Wi-Fi MAC. This property is
        /// read-only.</param>
        /// <param name="subscriberCarrier">Subscriber Carrier. This property
        /// is read-only.</param>
        /// <param name="meid">MEID. This property is read-only.</param>
        /// <param name="totalStorageSpaceInBytes">Total Storage in Bytes. This
        /// property is read-only.</param>
        /// <param name="freeStorageSpaceInBytes">Free Storage in Bytes. This
        /// property is read-only.</param>
        /// <param name="managedDeviceName">Automatically generated name to
        /// identify a device. Can be overwritten to a user friendly
        /// name.</param>
        /// <param name="partnerReportedThreatState">Possible values include:
        /// 'unknown', 'activated', 'deactivated', 'secured', 'lowSeverity',
        /// 'mediumSeverity', 'highSeverity', 'unresponsive', 'compromised',
        /// 'misconfigured'</param>
        /// <param name="retireAfterDateTime">Indicates the time after when a
        /// device will be auto retired because of scheduled action. This
        /// property is read-only.</param>
        /// <param name="usersLoggedOn">Indicates the last logged on users of a
        /// device. This property is read-only.</param>
        /// <param name="preferMdmOverGroupPolicyAppliedDateTime">Reports the
        /// DateTime the preferMdmOverGroupPolicy setting was set.  When set,
        /// the Intune MDM settings will override Group Policy settings if
        /// there is a conflict. Read Only. This property is read-only.</param>
        /// <param name="autopilotEnrolled">Reports if the managed device is
        /// enrolled via auto-pilot. This property is read-only.</param>
        /// <param name="requireUserEnrollmentApproval">Reports if the managed
        /// iOS device is user approval enrollment. This property is
        /// read-only.</param>
        /// <param name="managementCertificateExpirationDate">Reports device
        /// management certificate expiration date. This property is
        /// read-only.</param>
        /// <param name="iccid">Integrated Circuit Card Identifier, it is A SIM
        /// card's unique identification number. This property is
        /// read-only.</param>
        /// <param name="udid">Unique Device Identifier for iOS and macOS
        /// devices. This property is read-only.</param>
        /// <param name="roleScopeTagIds">List of Scope Tag IDs for this Device
        /// instance.</param>
        /// <param name="windowsActiveMalwareCount">Count of active malware for
        /// this windows device. This property is read-only.</param>
        /// <param name="windowsRemediatedMalwareCount">Count of remediated
        /// malware for this windows device. This property is
        /// read-only.</param>
        /// <param name="notes">Notes on the device created by IT Admin</param>
        public MicrosoftgraphmanagedDevice(string id = default(string), string userId = default(string), string deviceName = default(string), MicrosoftgraphhardwareInformation hardwareInformation = default(MicrosoftgraphhardwareInformation), string ownerType = default(string), string managedDeviceOwnerType = default(string), IList<MicrosoftgraphdeviceActionResult> deviceActionResults = default(IList<MicrosoftgraphdeviceActionResult>), string managementState = default(string), System.DateTime? enrolledDateTime = default(System.DateTime?), System.DateTime? lastSyncDateTime = default(System.DateTime?), string chassisType = default(string), string operatingSystem = default(string), string deviceType = default(string), string complianceState = default(string), string jailBroken = default(string), string managementAgent = default(string), string osVersion = default(string), bool? easActivated = default(bool?), string easDeviceId = default(string), System.DateTime? easActivationDateTime = default(System.DateTime?), bool? aadRegistered = default(bool?), bool? azureADRegistered = default(bool?), string deviceEnrollmentType = default(string), string lostModeState = default(string), string activationLockBypassCode = default(string), string emailAddress = default(string), string azureActiveDirectoryDeviceId = default(string), string azureADDeviceId = default(string), string deviceRegistrationState = default(string), string deviceCategoryDisplayName = default(string), bool? isSupervised = default(bool?), System.DateTime? exchangeLastSuccessfulSyncDateTime = default(System.DateTime?), string exchangeAccessState = default(string), string exchangeAccessStateReason = default(string), string remoteAssistanceSessionUrl = default(string), string remoteAssistanceSessionErrorDetails = default(string), bool? isEncrypted = default(bool?), string userPrincipalName = default(string), string model = default(string), string manufacturer = default(string), string imei = default(string), System.DateTime? complianceGracePeriodExpirationDateTime = default(System.DateTime?), string serialNumber = default(string), string phoneNumber = default(string), string androidSecurityPatchLevel = default(string), string userDisplayName = default(string), MicrosoftgraphconfigurationManagerClientEnabledFeatures configurationManagerClientEnabledFeatures = default(MicrosoftgraphconfigurationManagerClientEnabledFeatures), string wiFiMacAddress = default(string), MicrosoftgraphdeviceHealthAttestationState deviceHealthAttestationState = default(MicrosoftgraphdeviceHealthAttestationState), string subscriberCarrier = default(string), string meid = default(string), long? totalStorageSpaceInBytes = default(long?), long? freeStorageSpaceInBytes = default(long?), string managedDeviceName = default(string), string partnerReportedThreatState = default(string), System.DateTime? retireAfterDateTime = default(System.DateTime?), IList<MicrosoftgraphloggedOnUser> usersLoggedOn = default(IList<MicrosoftgraphloggedOnUser>), System.DateTime? preferMdmOverGroupPolicyAppliedDateTime = default(System.DateTime?), bool? autopilotEnrolled = default(bool?), bool? requireUserEnrollmentApproval = default(bool?), System.DateTime? managementCertificateExpirationDate = default(System.DateTime?), string iccid = default(string), string udid = default(string), IList<string> roleScopeTagIds = default(IList<string>), int? windowsActiveMalwareCount = default(int?), int? windowsRemediatedMalwareCount = default(int?), string notes = default(string), MicrosoftgraphconfigurationManagerClientHealthState configurationManagerClientHealthState = default(MicrosoftgraphconfigurationManagerClientHealthState), MicrosoftgraphconfigurationManagerClientInformation configurationManagerClientInformation = default(MicrosoftgraphconfigurationManagerClientInformation), IList<MicrosoftgraphsecurityBaselineState> securityBaselineStates = default(IList<MicrosoftgraphsecurityBaselineState>), IList<MicrosoftgraphdeviceConfigurationState> deviceConfigurationStates = default(IList<MicrosoftgraphdeviceConfigurationState>), IList<MicrosoftgraphdeviceCompliancePolicyState> deviceCompliancePolicyStates = default(IList<MicrosoftgraphdeviceCompliancePolicyState>), IList<MicrosoftgraphmanagedDeviceMobileAppConfigurationState> managedDeviceMobileAppConfigurationStates = default(IList<MicrosoftgraphmanagedDeviceMobileAppConfigurationState>), IList<MicrosoftgraphdetectedApp> detectedApps = default(IList<MicrosoftgraphdetectedApp>), MicrosoftgraphdeviceCategory deviceCategory = default(MicrosoftgraphdeviceCategory), MicrosoftgraphwindowsProtectionState windowsProtectionState = default(MicrosoftgraphwindowsProtectionState), IList<Microsoftgraphuser> users = default(IList<Microsoftgraphuser>))
        {
            Id = id;
            UserId = userId;
            DeviceName = deviceName;
            HardwareInformation = hardwareInformation;
            OwnerType = ownerType;
            ManagedDeviceOwnerType = managedDeviceOwnerType;
            DeviceActionResults = deviceActionResults;
            ManagementState = managementState;
            EnrolledDateTime = enrolledDateTime;
            LastSyncDateTime = lastSyncDateTime;
            ChassisType = chassisType;
            OperatingSystem = operatingSystem;
            DeviceType = deviceType;
            ComplianceState = complianceState;
            JailBroken = jailBroken;
            ManagementAgent = managementAgent;
            OsVersion = osVersion;
            EasActivated = easActivated;
            EasDeviceId = easDeviceId;
            EasActivationDateTime = easActivationDateTime;
            AadRegistered = aadRegistered;
            AzureADRegistered = azureADRegistered;
            DeviceEnrollmentType = deviceEnrollmentType;
            LostModeState = lostModeState;
            ActivationLockBypassCode = activationLockBypassCode;
            EmailAddress = emailAddress;
            AzureActiveDirectoryDeviceId = azureActiveDirectoryDeviceId;
            AzureADDeviceId = azureADDeviceId;
            DeviceRegistrationState = deviceRegistrationState;
            DeviceCategoryDisplayName = deviceCategoryDisplayName;
            IsSupervised = isSupervised;
            ExchangeLastSuccessfulSyncDateTime = exchangeLastSuccessfulSyncDateTime;
            ExchangeAccessState = exchangeAccessState;
            ExchangeAccessStateReason = exchangeAccessStateReason;
            RemoteAssistanceSessionUrl = remoteAssistanceSessionUrl;
            RemoteAssistanceSessionErrorDetails = remoteAssistanceSessionErrorDetails;
            IsEncrypted = isEncrypted;
            UserPrincipalName = userPrincipalName;
            Model = model;
            Manufacturer = manufacturer;
            Imei = imei;
            ComplianceGracePeriodExpirationDateTime = complianceGracePeriodExpirationDateTime;
            SerialNumber = serialNumber;
            PhoneNumber = phoneNumber;
            AndroidSecurityPatchLevel = androidSecurityPatchLevel;
            UserDisplayName = userDisplayName;
            ConfigurationManagerClientEnabledFeatures = configurationManagerClientEnabledFeatures;
            WiFiMacAddress = wiFiMacAddress;
            DeviceHealthAttestationState = deviceHealthAttestationState;
            SubscriberCarrier = subscriberCarrier;
            Meid = meid;
            TotalStorageSpaceInBytes = totalStorageSpaceInBytes;
            FreeStorageSpaceInBytes = freeStorageSpaceInBytes;
            ManagedDeviceName = managedDeviceName;
            PartnerReportedThreatState = partnerReportedThreatState;
            RetireAfterDateTime = retireAfterDateTime;
            UsersLoggedOn = usersLoggedOn;
            PreferMdmOverGroupPolicyAppliedDateTime = preferMdmOverGroupPolicyAppliedDateTime;
            AutopilotEnrolled = autopilotEnrolled;
            RequireUserEnrollmentApproval = requireUserEnrollmentApproval;
            ManagementCertificateExpirationDate = managementCertificateExpirationDate;
            Iccid = iccid;
            Udid = udid;
            RoleScopeTagIds = roleScopeTagIds;
            WindowsActiveMalwareCount = windowsActiveMalwareCount;
            WindowsRemediatedMalwareCount = windowsRemediatedMalwareCount;
            Notes = notes;
            ConfigurationManagerClientHealthState = configurationManagerClientHealthState;
            ConfigurationManagerClientInformation = configurationManagerClientInformation;
            SecurityBaselineStates = securityBaselineStates;
            DeviceConfigurationStates = deviceConfigurationStates;
            DeviceCompliancePolicyStates = deviceCompliancePolicyStates;
            ManagedDeviceMobileAppConfigurationStates = managedDeviceMobileAppConfigurationStates;
            DetectedApps = detectedApps;
            DeviceCategory = deviceCategory;
            WindowsProtectionState = windowsProtectionState;
            Users = users;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets unique Identifier for the user associated with the
        /// device. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets name of the device. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "deviceName")]
        public string DeviceName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hardwareInformation")]
        public MicrosoftgraphhardwareInformation HardwareInformation { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'company',
        /// 'personal'
        /// </summary>
        [JsonProperty(PropertyName = "ownerType")]
        public string OwnerType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'company',
        /// 'personal'
        /// </summary>
        [JsonProperty(PropertyName = "managedDeviceOwnerType")]
        public string ManagedDeviceOwnerType { get; set; }

        /// <summary>
        /// Gets or sets list of ComplexType deviceActionResult objects. This
        /// property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "deviceActionResults")]
        public IList<MicrosoftgraphdeviceActionResult> DeviceActionResults { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'managed', 'retirePending',
        /// 'retireFailed', 'wipePending', 'wipeFailed', 'unhealthy',
        /// 'deletePending', 'retireIssued', 'wipeIssued', 'wipeCanceled',
        /// 'retireCanceled', 'discovered'
        /// </summary>
        [JsonProperty(PropertyName = "managementState")]
        public string ManagementState { get; set; }

        /// <summary>
        /// Gets or sets enrollment time of the device. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "enrolledDateTime")]
        public System.DateTime? EnrolledDateTime { get; set; }

        /// <summary>
        /// Gets or sets the date and time that the device last completed a
        /// successful sync with Intune. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "lastSyncDateTime")]
        public System.DateTime? LastSyncDateTime { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'desktop',
        /// 'laptop', 'worksWorkstation', 'enterpriseServer', 'phone',
        /// 'tablet', 'mobileOther', 'mobileUnknown'
        /// </summary>
        [JsonProperty(PropertyName = "chassisType")]
        public string ChassisType { get; set; }

        /// <summary>
        /// Gets or sets operating system of the device. Windows, iOS, etc.
        /// This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "operatingSystem")]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'desktop', 'windowsRT',
        /// 'winMO6', 'nokia', 'windowsPhone', 'mac', 'winCE', 'winEmbedded',
        /// 'iPhone', 'iPad', 'iPod', 'android', 'iSocConsumer', 'unix',
        /// 'macMDM', 'holoLens', 'surfaceHub', 'androidForWork',
        /// 'androidEnterprise', 'blackberry', 'palm', 'unknown'
        /// </summary>
        [JsonProperty(PropertyName = "deviceType")]
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'compliant',
        /// 'noncompliant', 'conflict', 'error', 'inGracePeriod',
        /// 'configManager'
        /// </summary>
        [JsonProperty(PropertyName = "complianceState")]
        public string ComplianceState { get; set; }

        /// <summary>
        /// Gets or sets whether the device is jail broken or rooted. This
        /// property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "jailBroken")]
        public string JailBroken { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'eas', 'mdm', 'easMdm',
        /// 'intuneClient', 'easIntuneClient', 'configurationManagerClient',
        /// 'configurationManagerClientMdm',
        /// 'configurationManagerClientMdmEas', 'unknown', 'jamf',
        /// 'googleCloudDevicePolicyController', 'microsoft365ManagedMdm'
        /// </summary>
        [JsonProperty(PropertyName = "managementAgent")]
        public string ManagementAgent { get; set; }

        /// <summary>
        /// Gets or sets operating system version of the device. This property
        /// is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "osVersion")]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or sets whether the device is Exchange ActiveSync activated.
        /// This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "easActivated")]
        public bool? EasActivated { get; set; }

        /// <summary>
        /// Gets or sets exchange ActiveSync Id of the device. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "easDeviceId")]
        public string EasDeviceId { get; set; }

        /// <summary>
        /// Gets or sets exchange ActivationSync activation time of the device.
        /// This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "easActivationDateTime")]
        public System.DateTime? EasActivationDateTime { get; set; }

        /// <summary>
        /// Gets or sets whether the device is Azure Active Directory
        /// registered. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "aadRegistered")]
        public bool? AadRegistered { get; set; }

        /// <summary>
        /// Gets or sets whether the device is Azure Active Directory
        /// registered. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "azureADRegistered")]
        public bool? AzureADRegistered { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'userEnrollment',
        /// 'deviceEnrollmentManager', 'appleBulkWithUser',
        /// 'appleBulkWithoutUser', 'windowsAzureADJoin',
        /// 'windowsBulkUserless', 'windowsAutoEnrollment',
        /// 'windowsBulkAzureDomainJoin', 'windowsCoManagement',
        /// 'appleUserEnrollment', 'appleUserEnrollmentWithServiceAccount'
        /// </summary>
        [JsonProperty(PropertyName = "deviceEnrollmentType")]
        public string DeviceEnrollmentType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'disabled', 'enabled'
        /// </summary>
        [JsonProperty(PropertyName = "lostModeState")]
        public string LostModeState { get; set; }

        /// <summary>
        /// Gets or sets code that allows the Activation Lock on a device to be
        /// bypassed. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "activationLockBypassCode")]
        public string ActivationLockBypassCode { get; set; }

        /// <summary>
        /// Gets or sets email(s) for the user associated with the device. This
        /// property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the Azure Active Directory
        /// device. Read only. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "azureActiveDirectoryDeviceId")]
        public string AzureActiveDirectoryDeviceId { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the Azure Active Directory
        /// device. Read only. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "azureADDeviceId")]
        public string AzureADDeviceId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'notRegistered',
        /// 'registered', 'revoked', 'keyConflict', 'approvalPending',
        /// 'certificateReset', 'notRegisteredPendingEnrollment', 'unknown'
        /// </summary>
        [JsonProperty(PropertyName = "deviceRegistrationState")]
        public string DeviceRegistrationState { get; set; }

        /// <summary>
        /// Gets or sets device category display name. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "deviceCategoryDisplayName")]
        public string DeviceCategoryDisplayName { get; set; }

        /// <summary>
        /// Gets or sets device supervised status. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "isSupervised")]
        public bool? IsSupervised { get; set; }

        /// <summary>
        /// Gets or sets last time the device contacted Exchange. This property
        /// is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "exchangeLastSuccessfulSyncDateTime")]
        public System.DateTime? ExchangeLastSuccessfulSyncDateTime { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'unknown', 'allowed',
        /// 'blocked', 'quarantined'
        /// </summary>
        [JsonProperty(PropertyName = "exchangeAccessState")]
        public string ExchangeAccessState { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'unknown',
        /// 'exchangeGlobalRule', 'exchangeIndividualRule',
        /// 'exchangeDeviceRule', 'exchangeUpgrade', 'exchangeMailboxPolicy',
        /// 'other', 'compliant', 'notCompliant', 'notEnrolled',
        /// 'unknownLocation', 'mfaRequired', 'azureADBlockDueToAccessPolicy',
        /// 'compromisedPassword', 'deviceNotKnownWithManagedApp'
        /// </summary>
        [JsonProperty(PropertyName = "exchangeAccessStateReason")]
        public string ExchangeAccessStateReason { get; set; }

        /// <summary>
        /// Gets or sets url that allows a Remote Assistance session to be
        /// established with the device. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "remoteAssistanceSessionUrl")]
        public string RemoteAssistanceSessionUrl { get; set; }

        /// <summary>
        /// Gets or sets an error string that identifies issues when creating
        /// Remote Assistance session objects. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "remoteAssistanceSessionErrorDetails")]
        public string RemoteAssistanceSessionErrorDetails { get; set; }

        /// <summary>
        /// Gets or sets device encryption status. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "isEncrypted")]
        public bool? IsEncrypted { get; set; }

        /// <summary>
        /// Gets or sets device user principal name. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Gets or sets model of the device. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "model")]
        public string Model { get; set; }

        /// <summary>
        /// Gets or sets manufacturer of the device. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "manufacturer")]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or sets IMEI. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "imei")]
        public string Imei { get; set; }

        /// <summary>
        /// Gets or sets the DateTime when device compliance grace period
        /// expires. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "complianceGracePeriodExpirationDateTime")]
        public System.DateTime? ComplianceGracePeriodExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or sets serialNumber. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets phone number of the device. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets android security patch level. This property is
        /// read-only.
        /// </summary>
        [JsonProperty(PropertyName = "androidSecurityPatchLevel")]
        public string AndroidSecurityPatchLevel { get; set; }

        /// <summary>
        /// Gets or sets user display name. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "userDisplayName")]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configurationManagerClientEnabledFeatures")]
        public MicrosoftgraphconfigurationManagerClientEnabledFeatures ConfigurationManagerClientEnabledFeatures { get; set; }

        /// <summary>
        /// Gets or sets wi-Fi MAC. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "wiFiMacAddress")]
        public string WiFiMacAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceHealthAttestationState")]
        public MicrosoftgraphdeviceHealthAttestationState DeviceHealthAttestationState { get; set; }

        /// <summary>
        /// Gets or sets subscriber Carrier. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "subscriberCarrier")]
        public string SubscriberCarrier { get; set; }

        /// <summary>
        /// Gets or sets MEID. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "meid")]
        public string Meid { get; set; }

        /// <summary>
        /// Gets or sets total Storage in Bytes. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "totalStorageSpaceInBytes")]
        public long? TotalStorageSpaceInBytes { get; set; }

        /// <summary>
        /// Gets or sets free Storage in Bytes. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "freeStorageSpaceInBytes")]
        public long? FreeStorageSpaceInBytes { get; set; }

        /// <summary>
        /// Gets or sets automatically generated name to identify a device. Can
        /// be overwritten to a user friendly name.
        /// </summary>
        [JsonProperty(PropertyName = "managedDeviceName")]
        public string ManagedDeviceName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'activated',
        /// 'deactivated', 'secured', 'lowSeverity', 'mediumSeverity',
        /// 'highSeverity', 'unresponsive', 'compromised', 'misconfigured'
        /// </summary>
        [JsonProperty(PropertyName = "partnerReportedThreatState")]
        public string PartnerReportedThreatState { get; set; }

        /// <summary>
        /// Gets or sets indicates the time after when a device will be auto
        /// retired because of scheduled action. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "retireAfterDateTime")]
        public System.DateTime? RetireAfterDateTime { get; set; }

        /// <summary>
        /// Gets or sets indicates the last logged on users of a device. This
        /// property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "usersLoggedOn")]
        public IList<MicrosoftgraphloggedOnUser> UsersLoggedOn { get; set; }

        /// <summary>
        /// Gets or sets reports the DateTime the preferMdmOverGroupPolicy
        /// setting was set.  When set, the Intune MDM settings will override
        /// Group Policy settings if there is a conflict. Read Only. This
        /// property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "preferMdmOverGroupPolicyAppliedDateTime")]
        public System.DateTime? PreferMdmOverGroupPolicyAppliedDateTime { get; set; }

        /// <summary>
        /// Gets or sets reports if the managed device is enrolled via
        /// auto-pilot. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "autopilotEnrolled")]
        public bool? AutopilotEnrolled { get; set; }

        /// <summary>
        /// Gets or sets reports if the managed iOS device is user approval
        /// enrollment. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "requireUserEnrollmentApproval")]
        public bool? RequireUserEnrollmentApproval { get; set; }

        /// <summary>
        /// Gets or sets reports device management certificate expiration date.
        /// This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "managementCertificateExpirationDate")]
        public System.DateTime? ManagementCertificateExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets integrated Circuit Card Identifier, it is A SIM card's
        /// unique identification number. This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "iccid")]
        public string Iccid { get; set; }

        /// <summary>
        /// Gets or sets unique Device Identifier for iOS and macOS devices.
        /// This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "udid")]
        public string Udid { get; set; }

        /// <summary>
        /// Gets or sets list of Scope Tag IDs for this Device instance.
        /// </summary>
        [JsonProperty(PropertyName = "roleScopeTagIds")]
        public IList<string> RoleScopeTagIds { get; set; }

        /// <summary>
        /// Gets or sets count of active malware for this windows device. This
        /// property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "windowsActiveMalwareCount")]
        public int? WindowsActiveMalwareCount { get; set; }

        /// <summary>
        /// Gets or sets count of remediated malware for this windows device.
        /// This property is read-only.
        /// </summary>
        [JsonProperty(PropertyName = "windowsRemediatedMalwareCount")]
        public int? WindowsRemediatedMalwareCount { get; set; }

        /// <summary>
        /// Gets or sets notes on the device created by IT Admin
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configurationManagerClientHealthState")]
        public MicrosoftgraphconfigurationManagerClientHealthState ConfigurationManagerClientHealthState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configurationManagerClientInformation")]
        public MicrosoftgraphconfigurationManagerClientInformation ConfigurationManagerClientInformation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityBaselineStates")]
        public IList<MicrosoftgraphsecurityBaselineState> SecurityBaselineStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceConfigurationStates")]
        public IList<MicrosoftgraphdeviceConfigurationState> DeviceConfigurationStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceCompliancePolicyStates")]
        public IList<MicrosoftgraphdeviceCompliancePolicyState> DeviceCompliancePolicyStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedDeviceMobileAppConfigurationStates")]
        public IList<MicrosoftgraphmanagedDeviceMobileAppConfigurationState> ManagedDeviceMobileAppConfigurationStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detectedApps")]
        public IList<MicrosoftgraphdetectedApp> DetectedApps { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceCategory")]
        public MicrosoftgraphdeviceCategory DeviceCategory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "windowsProtectionState")]
        public MicrosoftgraphwindowsProtectionState WindowsProtectionState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<Microsoftgraphuser> Users { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WindowsActiveMalwareCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "WindowsActiveMalwareCount", 2147483647);
            }
            if (WindowsActiveMalwareCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "WindowsActiveMalwareCount", -2147483648);
            }
            if (WindowsRemediatedMalwareCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "WindowsRemediatedMalwareCount", 2147483647);
            }
            if (WindowsRemediatedMalwareCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "WindowsRemediatedMalwareCount", -2147483648);
            }
            if (ConfigurationManagerClientHealthState != null)
            {
                ConfigurationManagerClientHealthState.Validate();
            }
            if (DeviceConfigurationStates != null)
            {
                foreach (var element in DeviceConfigurationStates)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (DeviceCompliancePolicyStates != null)
            {
                foreach (var element1 in DeviceCompliancePolicyStates)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (ManagedDeviceMobileAppConfigurationStates != null)
            {
                foreach (var element2 in ManagedDeviceMobileAppConfigurationStates)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (DetectedApps != null)
            {
                foreach (var element3 in DetectedApps)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (Users != null)
            {
                foreach (var element4 in Users)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
        }
    }
}
