// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// deviceHealthAttestationState
    /// </summary>
    public partial class MicrosoftgraphdeviceHealthAttestationState
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphdeviceHealthAttestationState class.
        /// </summary>
        public MicrosoftgraphdeviceHealthAttestationState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphdeviceHealthAttestationState class.
        /// </summary>
        /// <param name="lastUpdateDateTime">The Timestamp of the last
        /// update.</param>
        /// <param name="contentNamespaceUrl">The DHA report version.
        /// (Namespace version)</param>
        /// <param name="deviceHealthAttestationStatus">The DHA report version.
        /// (Namespace version)</param>
        /// <param name="contentVersion">The HealthAttestation state schema
        /// version</param>
        /// <param name="issuedDateTime">The DateTime when device was evaluated
        /// or issued to MDM</param>
        /// <param name="attestationIdentityKey">TWhen an Attestation Identity
        /// Key (AIK) is present on a device, it indicates that the device has
        /// an endorsement key (EK) certificate.</param>
        /// <param name="resetCount">The number of times a PC device has
        /// hibernated or resumed</param>
        /// <param name="restartCount">The number of times a PC device has
        /// rebooted</param>
        /// <param name="dataExcutionPolicy">DEP Policy defines a set of
        /// hardware and software technologies that perform additional checks
        /// on memory </param>
        /// <param name="bitLockerStatus">On or Off of BitLocker Drive
        /// Encryption</param>
        /// <param name="bootManagerVersion">The version of the Boot
        /// Manager</param>
        /// <param name="codeIntegrityCheckVersion">The version of the Boot
        /// Manager</param>
        /// <param name="secureBoot">When Secure Boot is enabled, the core
        /// components must have the correct cryptographic signatures</param>
        /// <param name="bootDebugging">When bootDebugging is enabled, the
        /// device is used in development and testing</param>
        /// <param name="operatingSystemKernelDebugging">When
        /// operatingSystemKernelDebugging is enabled, the device is used in
        /// development and testing</param>
        /// <param name="codeIntegrity"> When code integrity is enabled, code
        /// execution is restricted to integrity verified code</param>
        /// <param name="testSigning">When test signing is allowed, the device
        /// does not enforce signature validation during boot</param>
        /// <param name="safeMode">Safe mode is a troubleshooting option for
        /// Windows that starts your computer in a limited state</param>
        /// <param name="windowsPE">Operating system running with limited
        /// services that is used to prepare a computer for Windows</param>
        /// <param name="earlyLaunchAntiMalwareDriverProtection">ELAM provides
        /// protection for the computers in your network when they start
        /// up</param>
        /// <param name="virtualSecureMode">VSM is a container that protects
        /// high value assets from a compromised kernel</param>
        /// <param name="pcrHashAlgorithm">Informational attribute that
        /// identifies the HASH algorithm that was used by TPM</param>
        /// <param name="bootAppSecurityVersion">The security version number of
        /// the Boot Application</param>
        /// <param name="bootManagerSecurityVersion">The security version
        /// number of the Boot Application</param>
        /// <param name="tpmVersion">The security version number of the Boot
        /// Application</param>
        /// <param name="pcr0">The measurement that is captured in
        /// PCR[0]</param>
        /// <param name="secureBootConfigurationPolicyFingerPrint">Fingerprint
        /// of the Custom Secure Boot Configuration Policy</param>
        /// <param name="codeIntegrityPolicy">The Code Integrity policy that is
        /// controlling the security of the boot environment</param>
        /// <param name="bootRevisionListInfo">The Boot Revision List that was
        /// loaded during initial boot on the attested device</param>
        /// <param name="operatingSystemRevListInfo">The Operating System
        /// Revision List that was loaded during initial boot on the attested
        /// device</param>
        /// <param name="healthStatusMismatchInfo">This attribute appears if
        /// DHA-Service detects an integrity issue</param>
        /// <param name="healthAttestationSupportedStatus">This attribute
        /// indicates if DHA is supported for the device</param>
        public MicrosoftgraphdeviceHealthAttestationState(string lastUpdateDateTime = default(string), string contentNamespaceUrl = default(string), string deviceHealthAttestationStatus = default(string), string contentVersion = default(string), System.DateTime? issuedDateTime = default(System.DateTime?), string attestationIdentityKey = default(string), long? resetCount = default(long?), long? restartCount = default(long?), string dataExcutionPolicy = default(string), string bitLockerStatus = default(string), string bootManagerVersion = default(string), string codeIntegrityCheckVersion = default(string), string secureBoot = default(string), string bootDebugging = default(string), string operatingSystemKernelDebugging = default(string), string codeIntegrity = default(string), string testSigning = default(string), string safeMode = default(string), string windowsPE = default(string), string earlyLaunchAntiMalwareDriverProtection = default(string), string virtualSecureMode = default(string), string pcrHashAlgorithm = default(string), string bootAppSecurityVersion = default(string), string bootManagerSecurityVersion = default(string), string tpmVersion = default(string), string pcr0 = default(string), string secureBootConfigurationPolicyFingerPrint = default(string), string codeIntegrityPolicy = default(string), string bootRevisionListInfo = default(string), string operatingSystemRevListInfo = default(string), string healthStatusMismatchInfo = default(string), string healthAttestationSupportedStatus = default(string))
        {
            LastUpdateDateTime = lastUpdateDateTime;
            ContentNamespaceUrl = contentNamespaceUrl;
            DeviceHealthAttestationStatus = deviceHealthAttestationStatus;
            ContentVersion = contentVersion;
            IssuedDateTime = issuedDateTime;
            AttestationIdentityKey = attestationIdentityKey;
            ResetCount = resetCount;
            RestartCount = restartCount;
            DataExcutionPolicy = dataExcutionPolicy;
            BitLockerStatus = bitLockerStatus;
            BootManagerVersion = bootManagerVersion;
            CodeIntegrityCheckVersion = codeIntegrityCheckVersion;
            SecureBoot = secureBoot;
            BootDebugging = bootDebugging;
            OperatingSystemKernelDebugging = operatingSystemKernelDebugging;
            CodeIntegrity = codeIntegrity;
            TestSigning = testSigning;
            SafeMode = safeMode;
            WindowsPE = windowsPE;
            EarlyLaunchAntiMalwareDriverProtection = earlyLaunchAntiMalwareDriverProtection;
            VirtualSecureMode = virtualSecureMode;
            PcrHashAlgorithm = pcrHashAlgorithm;
            BootAppSecurityVersion = bootAppSecurityVersion;
            BootManagerSecurityVersion = bootManagerSecurityVersion;
            TpmVersion = tpmVersion;
            Pcr0 = pcr0;
            SecureBootConfigurationPolicyFingerPrint = secureBootConfigurationPolicyFingerPrint;
            CodeIntegrityPolicy = codeIntegrityPolicy;
            BootRevisionListInfo = bootRevisionListInfo;
            OperatingSystemRevListInfo = operatingSystemRevListInfo;
            HealthStatusMismatchInfo = healthStatusMismatchInfo;
            HealthAttestationSupportedStatus = healthAttestationSupportedStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Timestamp of the last update.
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdateDateTime")]
        public string LastUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or sets the DHA report version. (Namespace version)
        /// </summary>
        [JsonProperty(PropertyName = "contentNamespaceUrl")]
        public string ContentNamespaceUrl { get; set; }

        /// <summary>
        /// Gets or sets the DHA report version. (Namespace version)
        /// </summary>
        [JsonProperty(PropertyName = "deviceHealthAttestationStatus")]
        public string DeviceHealthAttestationStatus { get; set; }

        /// <summary>
        /// Gets or sets the HealthAttestation state schema version
        /// </summary>
        [JsonProperty(PropertyName = "contentVersion")]
        public string ContentVersion { get; set; }

        /// <summary>
        /// Gets or sets the DateTime when device was evaluated or issued to
        /// MDM
        /// </summary>
        [JsonProperty(PropertyName = "issuedDateTime")]
        public System.DateTime? IssuedDateTime { get; set; }

        /// <summary>
        /// Gets or sets tWhen an Attestation Identity Key (AIK) is present on
        /// a device, it indicates that the device has an endorsement key (EK)
        /// certificate.
        /// </summary>
        [JsonProperty(PropertyName = "attestationIdentityKey")]
        public string AttestationIdentityKey { get; set; }

        /// <summary>
        /// Gets or sets the number of times a PC device has hibernated or
        /// resumed
        /// </summary>
        [JsonProperty(PropertyName = "resetCount")]
        public long? ResetCount { get; set; }

        /// <summary>
        /// Gets or sets the number of times a PC device has rebooted
        /// </summary>
        [JsonProperty(PropertyName = "restartCount")]
        public long? RestartCount { get; set; }

        /// <summary>
        /// Gets or sets DEP Policy defines a set of hardware and software
        /// technologies that perform additional checks on memory
        /// </summary>
        [JsonProperty(PropertyName = "dataExcutionPolicy")]
        public string DataExcutionPolicy { get; set; }

        /// <summary>
        /// Gets or sets on or Off of BitLocker Drive Encryption
        /// </summary>
        [JsonProperty(PropertyName = "bitLockerStatus")]
        public string BitLockerStatus { get; set; }

        /// <summary>
        /// Gets or sets the version of the Boot Manager
        /// </summary>
        [JsonProperty(PropertyName = "bootManagerVersion")]
        public string BootManagerVersion { get; set; }

        /// <summary>
        /// Gets or sets the version of the Boot Manager
        /// </summary>
        [JsonProperty(PropertyName = "codeIntegrityCheckVersion")]
        public string CodeIntegrityCheckVersion { get; set; }

        /// <summary>
        /// Gets or sets when Secure Boot is enabled, the core components must
        /// have the correct cryptographic signatures
        /// </summary>
        [JsonProperty(PropertyName = "secureBoot")]
        public string SecureBoot { get; set; }

        /// <summary>
        /// Gets or sets when bootDebugging is enabled, the device is used in
        /// development and testing
        /// </summary>
        [JsonProperty(PropertyName = "bootDebugging")]
        public string BootDebugging { get; set; }

        /// <summary>
        /// Gets or sets when operatingSystemKernelDebugging is enabled, the
        /// device is used in development and testing
        /// </summary>
        [JsonProperty(PropertyName = "operatingSystemKernelDebugging")]
        public string OperatingSystemKernelDebugging { get; set; }

        /// <summary>
        /// Gets or sets  When code integrity is enabled, code execution is
        /// restricted to integrity verified code
        /// </summary>
        [JsonProperty(PropertyName = "codeIntegrity")]
        public string CodeIntegrity { get; set; }

        /// <summary>
        /// Gets or sets when test signing is allowed, the device does not
        /// enforce signature validation during boot
        /// </summary>
        [JsonProperty(PropertyName = "testSigning")]
        public string TestSigning { get; set; }

        /// <summary>
        /// Gets or sets safe mode is a troubleshooting option for Windows that
        /// starts your computer in a limited state
        /// </summary>
        [JsonProperty(PropertyName = "safeMode")]
        public string SafeMode { get; set; }

        /// <summary>
        /// Gets or sets operating system running with limited services that is
        /// used to prepare a computer for Windows
        /// </summary>
        [JsonProperty(PropertyName = "windowsPE")]
        public string WindowsPE { get; set; }

        /// <summary>
        /// Gets or sets ELAM provides protection for the computers in your
        /// network when they start up
        /// </summary>
        [JsonProperty(PropertyName = "earlyLaunchAntiMalwareDriverProtection")]
        public string EarlyLaunchAntiMalwareDriverProtection { get; set; }

        /// <summary>
        /// Gets or sets VSM is a container that protects high value assets
        /// from a compromised kernel
        /// </summary>
        [JsonProperty(PropertyName = "virtualSecureMode")]
        public string VirtualSecureMode { get; set; }

        /// <summary>
        /// Gets or sets informational attribute that identifies the HASH
        /// algorithm that was used by TPM
        /// </summary>
        [JsonProperty(PropertyName = "pcrHashAlgorithm")]
        public string PcrHashAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets the security version number of the Boot Application
        /// </summary>
        [JsonProperty(PropertyName = "bootAppSecurityVersion")]
        public string BootAppSecurityVersion { get; set; }

        /// <summary>
        /// Gets or sets the security version number of the Boot Application
        /// </summary>
        [JsonProperty(PropertyName = "bootManagerSecurityVersion")]
        public string BootManagerSecurityVersion { get; set; }

        /// <summary>
        /// Gets or sets the security version number of the Boot Application
        /// </summary>
        [JsonProperty(PropertyName = "tpmVersion")]
        public string TpmVersion { get; set; }

        /// <summary>
        /// Gets or sets the measurement that is captured in PCR[0]
        /// </summary>
        [JsonProperty(PropertyName = "pcr0")]
        public string Pcr0 { get; set; }

        /// <summary>
        /// Gets or sets fingerprint of the Custom Secure Boot Configuration
        /// Policy
        /// </summary>
        [JsonProperty(PropertyName = "secureBootConfigurationPolicyFingerPrint")]
        public string SecureBootConfigurationPolicyFingerPrint { get; set; }

        /// <summary>
        /// Gets or sets the Code Integrity policy that is controlling the
        /// security of the boot environment
        /// </summary>
        [JsonProperty(PropertyName = "codeIntegrityPolicy")]
        public string CodeIntegrityPolicy { get; set; }

        /// <summary>
        /// Gets or sets the Boot Revision List that was loaded during initial
        /// boot on the attested device
        /// </summary>
        [JsonProperty(PropertyName = "bootRevisionListInfo")]
        public string BootRevisionListInfo { get; set; }

        /// <summary>
        /// Gets or sets the Operating System Revision List that was loaded
        /// during initial boot on the attested device
        /// </summary>
        [JsonProperty(PropertyName = "operatingSystemRevListInfo")]
        public string OperatingSystemRevListInfo { get; set; }

        /// <summary>
        /// Gets or sets this attribute appears if DHA-Service detects an
        /// integrity issue
        /// </summary>
        [JsonProperty(PropertyName = "healthStatusMismatchInfo")]
        public string HealthStatusMismatchInfo { get; set; }

        /// <summary>
        /// Gets or sets this attribute indicates if DHA is supported for the
        /// device
        /// </summary>
        [JsonProperty(PropertyName = "healthAttestationSupportedStatus")]
        public string HealthAttestationSupportedStatus { get; set; }

    }
}
