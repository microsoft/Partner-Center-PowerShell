// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// detectedApp
    /// </summary>
    /// <remarks>
    /// A managed or unmanaged app that is installed on a managed device.
    /// Unmanaged apps will only appear for devices marked as corporate owned.
    /// </remarks>
    public partial class ComponentsschemasmicrosoftGraphDetectedappallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphDetectedappallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphDetectedappallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphDetectedappallof1 class.
        /// </summary>
        /// <param name="displayName">Name of the discovered application.
        /// Read-only</param>
        /// <param name="version">Version of the discovered application.
        /// Read-only</param>
        /// <param name="sizeInByte">Discovered application size in bytes.
        /// Read-only</param>
        /// <param name="deviceCount">The number of devices that have installed
        /// this application</param>
        public ComponentsschemasmicrosoftGraphDetectedappallof1(string displayName = default(string), string version = default(string), long? sizeInByte = default(long?), int? deviceCount = default(int?), IList<MicrosoftgraphmanagedDevice> managedDevices = default(IList<MicrosoftgraphmanagedDevice>))
        {
            DisplayName = displayName;
            Version = version;
            SizeInByte = sizeInByte;
            DeviceCount = deviceCount;
            ManagedDevices = managedDevices;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the discovered application. Read-only
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets version of the discovered application. Read-only
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets discovered application size in bytes. Read-only
        /// </summary>
        [JsonProperty(PropertyName = "sizeInByte")]
        public long? SizeInByte { get; set; }

        /// <summary>
        /// Gets or sets the number of devices that have installed this
        /// application
        /// </summary>
        [JsonProperty(PropertyName = "deviceCount")]
        public int? DeviceCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedDevices")]
        public IList<MicrosoftgraphmanagedDevice> ManagedDevices { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DeviceCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DeviceCount", 2147483647);
            }
            if (DeviceCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DeviceCount", -2147483648);
            }
            if (ManagedDevices != null)
            {
                foreach (var element in ManagedDevices)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
