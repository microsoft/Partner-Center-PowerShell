// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MicrosoftgraphplannerTask
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphplannerTask class.
        /// </summary>
        public MicrosoftgraphplannerTask()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphplannerTask class.
        /// </summary>
        /// <param name="previewType">Possible values include: 'automatic',
        /// 'noPreview', 'checklist', 'description', 'reference'</param>
        public MicrosoftgraphplannerTask(string id = default(string), MicrosoftgraphidentitySet createdBy = default(MicrosoftgraphidentitySet), string planId = default(string), string bucketId = default(string), string title = default(string), string orderHint = default(string), string assigneePriority = default(string), int? percentComplete = default(int?), int? priority = default(int?), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? createdDateTime = default(System.DateTime?), System.DateTime? dueDateTime = default(System.DateTime?), bool? hasDescription = default(bool?), string previewType = default(string), System.DateTime? completedDateTime = default(System.DateTime?), MicrosoftgraphidentitySet completedBy = default(MicrosoftgraphidentitySet), int? referenceCount = default(int?), int? checklistItemCount = default(int?), int? activeChecklistItemCount = default(int?), object appliedCategories = default(object), object assignments = default(object), string conversationThreadId = default(string), MicrosoftgraphplannerTaskDetails details = default(MicrosoftgraphplannerTaskDetails), MicrosoftgraphplannerAssignedToTaskBoardTaskFormat assignedToTaskBoardFormat = default(MicrosoftgraphplannerAssignedToTaskBoardTaskFormat), MicrosoftgraphplannerProgressTaskBoardTaskFormat progressTaskBoardFormat = default(MicrosoftgraphplannerProgressTaskBoardTaskFormat), MicrosoftgraphplannerBucketTaskBoardTaskFormat bucketTaskBoardFormat = default(MicrosoftgraphplannerBucketTaskBoardTaskFormat))
        {
            Id = id;
            CreatedBy = createdBy;
            PlanId = planId;
            BucketId = bucketId;
            Title = title;
            OrderHint = orderHint;
            AssigneePriority = assigneePriority;
            PercentComplete = percentComplete;
            Priority = priority;
            StartDateTime = startDateTime;
            CreatedDateTime = createdDateTime;
            DueDateTime = dueDateTime;
            HasDescription = hasDescription;
            PreviewType = previewType;
            CompletedDateTime = completedDateTime;
            CompletedBy = completedBy;
            ReferenceCount = referenceCount;
            ChecklistItemCount = checklistItemCount;
            ActiveChecklistItemCount = activeChecklistItemCount;
            AppliedCategories = appliedCategories;
            Assignments = assignments;
            ConversationThreadId = conversationThreadId;
            Details = details;
            AssignedToTaskBoardFormat = assignedToTaskBoardFormat;
            ProgressTaskBoardFormat = progressTaskBoardFormat;
            BucketTaskBoardFormat = bucketTaskBoardFormat;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public MicrosoftgraphidentitySet CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "planId")]
        public string PlanId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bucketId")]
        public string BucketId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderHint")]
        public string OrderHint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assigneePriority")]
        public string AssigneePriority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "percentComplete")]
        public int? PercentComplete { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dueDateTime")]
        public System.DateTime? DueDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasDescription")]
        public bool? HasDescription { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'automatic', 'noPreview',
        /// 'checklist', 'description', 'reference'
        /// </summary>
        [JsonProperty(PropertyName = "previewType")]
        public string PreviewType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "completedDateTime")]
        public System.DateTime? CompletedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "completedBy")]
        public MicrosoftgraphidentitySet CompletedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "referenceCount")]
        public int? ReferenceCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "checklistItemCount")]
        public int? ChecklistItemCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activeChecklistItemCount")]
        public int? ActiveChecklistItemCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appliedCategories")]
        public object AppliedCategories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignments")]
        public object Assignments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conversationThreadId")]
        public string ConversationThreadId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public MicrosoftgraphplannerTaskDetails Details { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedToTaskBoardFormat")]
        public MicrosoftgraphplannerAssignedToTaskBoardTaskFormat AssignedToTaskBoardFormat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "progressTaskBoardFormat")]
        public MicrosoftgraphplannerProgressTaskBoardTaskFormat ProgressTaskBoardFormat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bucketTaskBoardFormat")]
        public MicrosoftgraphplannerBucketTaskBoardTaskFormat BucketTaskBoardFormat { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PercentComplete > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PercentComplete", 2147483647);
            }
            if (PercentComplete < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PercentComplete", -2147483648);
            }
            if (Priority > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Priority", 2147483647);
            }
            if (Priority < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Priority", -2147483648);
            }
            if (ReferenceCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ReferenceCount", 2147483647);
            }
            if (ReferenceCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ReferenceCount", -2147483648);
            }
            if (ChecklistItemCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ChecklistItemCount", 2147483647);
            }
            if (ChecklistItemCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ChecklistItemCount", -2147483648);
            }
            if (ActiveChecklistItemCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ActiveChecklistItemCount", 2147483647);
            }
            if (ActiveChecklistItemCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ActiveChecklistItemCount", -2147483648);
            }
        }
    }
}
