// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// recurrencePattern
    /// </summary>
    public partial class MicrosoftgraphrecurrencePattern
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphrecurrencePattern
        /// class.
        /// </summary>
        public MicrosoftgraphrecurrencePattern()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphrecurrencePattern
        /// class.
        /// </summary>
        /// <param name="type">Possible values include: 'daily', 'weekly',
        /// 'absoluteMonthly', 'relativeMonthly', 'absoluteYearly',
        /// 'relativeYearly'</param>
        /// <param name="firstDayOfWeek">Possible values include: 'sunday',
        /// 'monday', 'tuesday', 'wednesday', 'thursday', 'friday',
        /// 'saturday'</param>
        /// <param name="index">Possible values include: 'first', 'second',
        /// 'third', 'fourth', 'last'</param>
        public MicrosoftgraphrecurrencePattern(string type = default(string), int? interval = default(int?), int? month = default(int?), int? dayOfMonth = default(int?), IList<string> daysOfWeek = default(IList<string>), string firstDayOfWeek = default(string), string index = default(string))
        {
            Type = type;
            Interval = interval;
            Month = month;
            DayOfMonth = dayOfMonth;
            DaysOfWeek = daysOfWeek;
            FirstDayOfWeek = firstDayOfWeek;
            Index = index;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'daily', 'weekly',
        /// 'absoluteMonthly', 'relativeMonthly', 'absoluteYearly',
        /// 'relativeYearly'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "month")]
        public int? Month { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dayOfMonth")]
        public int? DayOfMonth { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "daysOfWeek")]
        public IList<string> DaysOfWeek { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'sunday', 'monday',
        /// 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'
        /// </summary>
        [JsonProperty(PropertyName = "firstDayOfWeek")]
        public string FirstDayOfWeek { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'first', 'second', 'third',
        /// 'fourth', 'last'
        /// </summary>
        [JsonProperty(PropertyName = "index")]
        public string Index { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Interval > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Interval", 2147483647);
            }
            if (Interval < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Interval", -2147483648);
            }
            if (Month > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Month", 2147483647);
            }
            if (Month < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Month", -2147483648);
            }
            if (DayOfMonth > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DayOfMonth", 2147483647);
            }
            if (DayOfMonth < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DayOfMonth", -2147483648);
            }
        }
    }
}
