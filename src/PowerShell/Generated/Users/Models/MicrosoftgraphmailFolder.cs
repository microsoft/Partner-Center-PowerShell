// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MicrosoftgraphmailFolder
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphmailFolder class.
        /// </summary>
        public MicrosoftgraphmailFolder()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphmailFolder class.
        /// </summary>
        public MicrosoftgraphmailFolder(string id = default(string), string displayName = default(string), string parentFolderId = default(string), int? childFolderCount = default(int?), int? unreadItemCount = default(int?), int? totalItemCount = default(int?), string wellKnownName = default(string), IList<MicrosoftgraphsingleValueLegacyExtendedProperty> singleValueExtendedProperties = default(IList<MicrosoftgraphsingleValueLegacyExtendedProperty>), IList<MicrosoftgraphmultiValueLegacyExtendedProperty> multiValueExtendedProperties = default(IList<MicrosoftgraphmultiValueLegacyExtendedProperty>), IList<Microsoftgraphmessage> messages = default(IList<Microsoftgraphmessage>), IList<MicrosoftgraphmessageRule> messageRules = default(IList<MicrosoftgraphmessageRule>), IList<MicrosoftgraphmailFolder> childFolders = default(IList<MicrosoftgraphmailFolder>), IList<MicrosoftgraphuserConfiguration> userConfigurations = default(IList<MicrosoftgraphuserConfiguration>))
        {
            Id = id;
            DisplayName = displayName;
            ParentFolderId = parentFolderId;
            ChildFolderCount = childFolderCount;
            UnreadItemCount = unreadItemCount;
            TotalItemCount = totalItemCount;
            WellKnownName = wellKnownName;
            SingleValueExtendedProperties = singleValueExtendedProperties;
            MultiValueExtendedProperties = multiValueExtendedProperties;
            Messages = messages;
            MessageRules = messageRules;
            ChildFolders = childFolders;
            UserConfigurations = userConfigurations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentFolderId")]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "childFolderCount")]
        public int? ChildFolderCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unreadItemCount")]
        public int? UnreadItemCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalItemCount")]
        public int? TotalItemCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "wellKnownName")]
        public string WellKnownName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "singleValueExtendedProperties")]
        public IList<MicrosoftgraphsingleValueLegacyExtendedProperty> SingleValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiValueExtendedProperties")]
        public IList<MicrosoftgraphmultiValueLegacyExtendedProperty> MultiValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messages")]
        public IList<Microsoftgraphmessage> Messages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messageRules")]
        public IList<MicrosoftgraphmessageRule> MessageRules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "childFolders")]
        public IList<MicrosoftgraphmailFolder> ChildFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userConfigurations")]
        public IList<MicrosoftgraphuserConfiguration> UserConfigurations { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ChildFolderCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ChildFolderCount", 2147483647);
            }
            if (ChildFolderCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ChildFolderCount", -2147483648);
            }
            if (UnreadItemCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "UnreadItemCount", 2147483647);
            }
            if (UnreadItemCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "UnreadItemCount", -2147483648);
            }
            if (TotalItemCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "TotalItemCount", 2147483647);
            }
            if (TotalItemCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TotalItemCount", -2147483648);
            }
            if (MessageRules != null)
            {
                foreach (var element in MessageRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (ChildFolders != null)
            {
                foreach (var element1 in ChildFolders)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
