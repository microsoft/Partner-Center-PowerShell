// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MicrosoftgraphoutlookTask
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphoutlookTask class.
        /// </summary>
        public MicrosoftgraphoutlookTask()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphoutlookTask class.
        /// </summary>
        /// <param name="importance">Possible values include: 'low', 'normal',
        /// 'high'</param>
        /// <param name="sensitivity">Possible values include: 'normal',
        /// 'personal', 'private', 'confidential'</param>
        /// <param name="status">Possible values include: 'notStarted',
        /// 'inProgress', 'completed', 'waitingOnOthers', 'deferred'</param>
        public MicrosoftgraphoutlookTask(string id = default(string), System.DateTime? createdDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string changeKey = default(string), IList<string> categories = default(IList<string>), string assignedTo = default(string), MicrosoftgraphitemBody body = default(MicrosoftgraphitemBody), MicrosoftgraphdateTimeTimeZone completedDateTime = default(MicrosoftgraphdateTimeTimeZone), MicrosoftgraphdateTimeTimeZone dueDateTime = default(MicrosoftgraphdateTimeTimeZone), bool? hasAttachments = default(bool?), string importance = default(string), bool? isReminderOn = default(bool?), string owner = default(string), string parentFolderId = default(string), MicrosoftgraphpatternedRecurrence recurrence = default(MicrosoftgraphpatternedRecurrence), MicrosoftgraphdateTimeTimeZone reminderDateTime = default(MicrosoftgraphdateTimeTimeZone), string sensitivity = default(string), MicrosoftgraphdateTimeTimeZone startDateTime = default(MicrosoftgraphdateTimeTimeZone), string status = default(string), string subject = default(string), IList<MicrosoftgraphsingleValueLegacyExtendedProperty> singleValueExtendedProperties = default(IList<MicrosoftgraphsingleValueLegacyExtendedProperty>), IList<MicrosoftgraphmultiValueLegacyExtendedProperty> multiValueExtendedProperties = default(IList<MicrosoftgraphmultiValueLegacyExtendedProperty>), IList<Microsoftgraphattachment> attachments = default(IList<Microsoftgraphattachment>))
        {
            Id = id;
            CreatedDateTime = createdDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            ChangeKey = changeKey;
            Categories = categories;
            AssignedTo = assignedTo;
            Body = body;
            CompletedDateTime = completedDateTime;
            DueDateTime = dueDateTime;
            HasAttachments = hasAttachments;
            Importance = importance;
            IsReminderOn = isReminderOn;
            Owner = owner;
            ParentFolderId = parentFolderId;
            Recurrence = recurrence;
            ReminderDateTime = reminderDateTime;
            Sensitivity = sensitivity;
            StartDateTime = startDateTime;
            Status = status;
            Subject = subject;
            SingleValueExtendedProperties = singleValueExtendedProperties;
            MultiValueExtendedProperties = multiValueExtendedProperties;
            Attachments = attachments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "changeKey")]
        public string ChangeKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<string> Categories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedTo")]
        public string AssignedTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "body")]
        public MicrosoftgraphitemBody Body { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "completedDateTime")]
        public MicrosoftgraphdateTimeTimeZone CompletedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dueDateTime")]
        public MicrosoftgraphdateTimeTimeZone DueDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasAttachments")]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "importance")]
        public string Importance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReminderOn")]
        public bool? IsReminderOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentFolderId")]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurrence")]
        public MicrosoftgraphpatternedRecurrence Recurrence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reminderDateTime")]
        public MicrosoftgraphdateTimeTimeZone ReminderDateTime { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'normal', 'personal',
        /// 'private', 'confidential'
        /// </summary>
        [JsonProperty(PropertyName = "sensitivity")]
        public string Sensitivity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public MicrosoftgraphdateTimeTimeZone StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'notStarted', 'inProgress',
        /// 'completed', 'waitingOnOthers', 'deferred'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "singleValueExtendedProperties")]
        public IList<MicrosoftgraphsingleValueLegacyExtendedProperty> SingleValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiValueExtendedProperties")]
        public IList<MicrosoftgraphmultiValueLegacyExtendedProperty> MultiValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public IList<Microsoftgraphattachment> Attachments { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Recurrence != null)
            {
                Recurrence.Validate();
            }
            if (Attachments != null)
            {
                foreach (var element in Attachments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
