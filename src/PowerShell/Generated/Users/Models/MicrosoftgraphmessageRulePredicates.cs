// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// messageRulePredicates
    /// </summary>
    public partial class MicrosoftgraphmessageRulePredicates
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphmessageRulePredicates class.
        /// </summary>
        public MicrosoftgraphmessageRulePredicates()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphmessageRulePredicates class.
        /// </summary>
        /// <param name="messageActionFlag">Possible values include: 'any',
        /// 'call', 'doNotForward', 'followUp', 'fyi', 'forward',
        /// 'noResponseNecessary', 'read', 'reply', 'replyToAll',
        /// 'review'</param>
        /// <param name="importance">Possible values include: 'low', 'normal',
        /// 'high'</param>
        /// <param name="sensitivity">Possible values include: 'normal',
        /// 'personal', 'private', 'confidential'</param>
        public MicrosoftgraphmessageRulePredicates(IList<string> categories = default(IList<string>), IList<string> subjectContains = default(IList<string>), IList<string> bodyContains = default(IList<string>), IList<string> bodyOrSubjectContains = default(IList<string>), IList<string> senderContains = default(IList<string>), IList<string> recipientContains = default(IList<string>), IList<string> headerContains = default(IList<string>), string messageActionFlag = default(string), string importance = default(string), string sensitivity = default(string), IList<Microsoftgraphrecipient> fromAddresses = default(IList<Microsoftgraphrecipient>), IList<Microsoftgraphrecipient> sentToAddresses = default(IList<Microsoftgraphrecipient>), bool? sentToMe = default(bool?), bool? sentOnlyToMe = default(bool?), bool? sentCcMe = default(bool?), bool? sentToOrCcMe = default(bool?), bool? notSentToMe = default(bool?), bool? hasAttachments = default(bool?), bool? isApprovalRequest = default(bool?), bool? isAutomaticForward = default(bool?), bool? isAutomaticReply = default(bool?), bool? isEncrypted = default(bool?), bool? isMeetingRequest = default(bool?), bool? isMeetingResponse = default(bool?), bool? isNonDeliveryReport = default(bool?), bool? isPermissionControlled = default(bool?), bool? isReadReceipt = default(bool?), bool? isSigned = default(bool?), bool? isVoicemail = default(bool?), MicrosoftgraphsizeRange withinSizeRange = default(MicrosoftgraphsizeRange))
        {
            Categories = categories;
            SubjectContains = subjectContains;
            BodyContains = bodyContains;
            BodyOrSubjectContains = bodyOrSubjectContains;
            SenderContains = senderContains;
            RecipientContains = recipientContains;
            HeaderContains = headerContains;
            MessageActionFlag = messageActionFlag;
            Importance = importance;
            Sensitivity = sensitivity;
            FromAddresses = fromAddresses;
            SentToAddresses = sentToAddresses;
            SentToMe = sentToMe;
            SentOnlyToMe = sentOnlyToMe;
            SentCcMe = sentCcMe;
            SentToOrCcMe = sentToOrCcMe;
            NotSentToMe = notSentToMe;
            HasAttachments = hasAttachments;
            IsApprovalRequest = isApprovalRequest;
            IsAutomaticForward = isAutomaticForward;
            IsAutomaticReply = isAutomaticReply;
            IsEncrypted = isEncrypted;
            IsMeetingRequest = isMeetingRequest;
            IsMeetingResponse = isMeetingResponse;
            IsNonDeliveryReport = isNonDeliveryReport;
            IsPermissionControlled = isPermissionControlled;
            IsReadReceipt = isReadReceipt;
            IsSigned = isSigned;
            IsVoicemail = isVoicemail;
            WithinSizeRange = withinSizeRange;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<string> Categories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subjectContains")]
        public IList<string> SubjectContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bodyContains")]
        public IList<string> BodyContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bodyOrSubjectContains")]
        public IList<string> BodyOrSubjectContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "senderContains")]
        public IList<string> SenderContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recipientContains")]
        public IList<string> RecipientContains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "headerContains")]
        public IList<string> HeaderContains { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'any', 'call',
        /// 'doNotForward', 'followUp', 'fyi', 'forward',
        /// 'noResponseNecessary', 'read', 'reply', 'replyToAll', 'review'
        /// </summary>
        [JsonProperty(PropertyName = "messageActionFlag")]
        public string MessageActionFlag { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "importance")]
        public string Importance { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'normal', 'personal',
        /// 'private', 'confidential'
        /// </summary>
        [JsonProperty(PropertyName = "sensitivity")]
        public string Sensitivity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fromAddresses")]
        public IList<Microsoftgraphrecipient> FromAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentToAddresses")]
        public IList<Microsoftgraphrecipient> SentToAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentToMe")]
        public bool? SentToMe { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentOnlyToMe")]
        public bool? SentOnlyToMe { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentCcMe")]
        public bool? SentCcMe { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentToOrCcMe")]
        public bool? SentToOrCcMe { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notSentToMe")]
        public bool? NotSentToMe { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasAttachments")]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isApprovalRequest")]
        public bool? IsApprovalRequest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isAutomaticForward")]
        public bool? IsAutomaticForward { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isAutomaticReply")]
        public bool? IsAutomaticReply { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isEncrypted")]
        public bool? IsEncrypted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isMeetingRequest")]
        public bool? IsMeetingRequest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isMeetingResponse")]
        public bool? IsMeetingResponse { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isNonDeliveryReport")]
        public bool? IsNonDeliveryReport { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isPermissionControlled")]
        public bool? IsPermissionControlled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReadReceipt")]
        public bool? IsReadReceipt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSigned")]
        public bool? IsSigned { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVoicemail")]
        public bool? IsVoicemail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "withinSizeRange")]
        public MicrosoftgraphsizeRange WithinSizeRange { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WithinSizeRange != null)
            {
                WithinSizeRange.Validate();
            }
        }
    }
}
