// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// workbookWorksheet
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphWorkbookworksheetallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphWorkbookworksheetallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphWorkbookworksheetallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphWorkbookworksheetallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphWorkbookworksheetallof1(string name = default(string), int? position = default(int?), string visibility = default(string), IList<MicrosoftgraphworkbookChart> charts = default(IList<MicrosoftgraphworkbookChart>), IList<MicrosoftgraphworkbookNamedItem> names = default(IList<MicrosoftgraphworkbookNamedItem>), IList<MicrosoftgraphworkbookPivotTable> pivotTables = default(IList<MicrosoftgraphworkbookPivotTable>), MicrosoftgraphworkbookWorksheetProtection protection = default(MicrosoftgraphworkbookWorksheetProtection), IList<MicrosoftgraphworkbookTable> tables = default(IList<MicrosoftgraphworkbookTable>))
        {
            Name = name;
            Position = position;
            Visibility = visibility;
            Charts = charts;
            Names = names;
            PivotTables = pivotTables;
            Protection = protection;
            Tables = tables;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public int? Position { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "visibility")]
        public string Visibility { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "charts")]
        public IList<MicrosoftgraphworkbookChart> Charts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "names")]
        public IList<MicrosoftgraphworkbookNamedItem> Names { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pivotTables")]
        public IList<MicrosoftgraphworkbookPivotTable> PivotTables { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "protection")]
        public MicrosoftgraphworkbookWorksheetProtection Protection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tables")]
        public IList<MicrosoftgraphworkbookTable> Tables { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Position > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Position", 2147483647);
            }
            if (Position < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Position", -2147483648);
            }
            if (Charts != null)
            {
                foreach (var element in Charts)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Names != null)
            {
                foreach (var element1 in Names)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (PivotTables != null)
            {
                foreach (var element2 in PivotTables)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Tables != null)
            {
                foreach (var element3 in Tables)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
