// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Microsoftgraphevent
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphevent class.
        /// </summary>
        public Microsoftgraphevent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphevent class.
        /// </summary>
        /// <param name="importance">Possible values include: 'low', 'normal',
        /// 'high'</param>
        /// <param name="sensitivity">Possible values include: 'normal',
        /// 'personal', 'private', 'confidential'</param>
        /// <param name="showAs">Possible values include: 'free', 'tentative',
        /// 'busy', 'oof', 'workingElsewhere', 'unknown'</param>
        /// <param name="type">Possible values include: 'singleInstance',
        /// 'occurrence', 'exception', 'seriesMaster'</param>
        /// <param name="onlineMeetingProvider">Possible values include:
        /// 'unknown', 'skypeForBusiness', 'skypeForConsumer',
        /// 'teamsForBusiness'</param>
        public Microsoftgraphevent(string id = default(string), System.DateTime? createdDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string changeKey = default(string), IList<string> categories = default(IList<string>), string originalStartTimeZone = default(string), string originalEndTimeZone = default(string), MicrosoftgraphresponseStatus responseStatus = default(MicrosoftgraphresponseStatus), string uid = default(string), int? reminderMinutesBeforeStart = default(int?), bool? isReminderOn = default(bool?), bool? hasAttachments = default(bool?), string subject = default(string), MicrosoftgraphitemBody body = default(MicrosoftgraphitemBody), string bodyPreview = default(string), string importance = default(string), string sensitivity = default(string), MicrosoftgraphdateTimeTimeZone start = default(MicrosoftgraphdateTimeTimeZone), System.DateTime? originalStart = default(System.DateTime?), MicrosoftgraphdateTimeTimeZone end = default(MicrosoftgraphdateTimeTimeZone), Microsoftgraphlocation location = default(Microsoftgraphlocation), IList<Microsoftgraphlocation> locations = default(IList<Microsoftgraphlocation>), bool? isAllDay = default(bool?), bool? isCancelled = default(bool?), bool? isOrganizer = default(bool?), MicrosoftgraphpatternedRecurrence recurrence = default(MicrosoftgraphpatternedRecurrence), bool? responseRequested = default(bool?), string seriesMasterId = default(string), string showAs = default(string), string type = default(string), IList<Microsoftgraphattendee> attendees = default(IList<Microsoftgraphattendee>), Microsoftgraphrecipient organizer = default(Microsoftgraphrecipient), string webLink = default(string), string onlineMeetingUrl = default(string), bool? isOnlineMeeting = default(bool?), string onlineMeetingProvider = default(string), MicrosoftgraphonlineMeetingInfo onlineMeeting = default(MicrosoftgraphonlineMeetingInfo), bool? allowNewTimeProposals = default(bool?), IList<Microsoftgraphattachment> attachments = default(IList<Microsoftgraphattachment>), IList<MicrosoftgraphsingleValueLegacyExtendedProperty> singleValueExtendedProperties = default(IList<MicrosoftgraphsingleValueLegacyExtendedProperty>), IList<MicrosoftgraphmultiValueLegacyExtendedProperty> multiValueExtendedProperties = default(IList<MicrosoftgraphmultiValueLegacyExtendedProperty>), Microsoftgraphcalendar calendar = default(Microsoftgraphcalendar), IList<Microsoftgraphevent> instances = default(IList<Microsoftgraphevent>), IList<Microsoftgraphextension> extensions = default(IList<Microsoftgraphextension>))
        {
            Id = id;
            CreatedDateTime = createdDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            ChangeKey = changeKey;
            Categories = categories;
            OriginalStartTimeZone = originalStartTimeZone;
            OriginalEndTimeZone = originalEndTimeZone;
            ResponseStatus = responseStatus;
            Uid = uid;
            ReminderMinutesBeforeStart = reminderMinutesBeforeStart;
            IsReminderOn = isReminderOn;
            HasAttachments = hasAttachments;
            Subject = subject;
            Body = body;
            BodyPreview = bodyPreview;
            Importance = importance;
            Sensitivity = sensitivity;
            Start = start;
            OriginalStart = originalStart;
            End = end;
            Location = location;
            Locations = locations;
            IsAllDay = isAllDay;
            IsCancelled = isCancelled;
            IsOrganizer = isOrganizer;
            Recurrence = recurrence;
            ResponseRequested = responseRequested;
            SeriesMasterId = seriesMasterId;
            ShowAs = showAs;
            Type = type;
            Attendees = attendees;
            Organizer = organizer;
            WebLink = webLink;
            OnlineMeetingUrl = onlineMeetingUrl;
            IsOnlineMeeting = isOnlineMeeting;
            OnlineMeetingProvider = onlineMeetingProvider;
            OnlineMeeting = onlineMeeting;
            AllowNewTimeProposals = allowNewTimeProposals;
            Attachments = attachments;
            SingleValueExtendedProperties = singleValueExtendedProperties;
            MultiValueExtendedProperties = multiValueExtendedProperties;
            Calendar = calendar;
            Instances = instances;
            Extensions = extensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "changeKey")]
        public string ChangeKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<string> Categories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originalStartTimeZone")]
        public string OriginalStartTimeZone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originalEndTimeZone")]
        public string OriginalEndTimeZone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responseStatus")]
        public MicrosoftgraphresponseStatus ResponseStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reminderMinutesBeforeStart")]
        public int? ReminderMinutesBeforeStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReminderOn")]
        public bool? IsReminderOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasAttachments")]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "body")]
        public MicrosoftgraphitemBody Body { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bodyPreview")]
        public string BodyPreview { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "importance")]
        public string Importance { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'normal', 'personal',
        /// 'private', 'confidential'
        /// </summary>
        [JsonProperty(PropertyName = "sensitivity")]
        public string Sensitivity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public MicrosoftgraphdateTimeTimeZone Start { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originalStart")]
        public System.DateTime? OriginalStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public MicrosoftgraphdateTimeTimeZone End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Microsoftgraphlocation Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "locations")]
        public IList<Microsoftgraphlocation> Locations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isAllDay")]
        public bool? IsAllDay { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isCancelled")]
        public bool? IsCancelled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isOrganizer")]
        public bool? IsOrganizer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurrence")]
        public MicrosoftgraphpatternedRecurrence Recurrence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responseRequested")]
        public bool? ResponseRequested { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seriesMasterId")]
        public string SeriesMasterId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'free', 'tentative', 'busy',
        /// 'oof', 'workingElsewhere', 'unknown'
        /// </summary>
        [JsonProperty(PropertyName = "showAs")]
        public string ShowAs { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'singleInstance',
        /// 'occurrence', 'exception', 'seriesMaster'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attendees")]
        public IList<Microsoftgraphattendee> Attendees { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "organizer")]
        public Microsoftgraphrecipient Organizer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "webLink")]
        public string WebLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onlineMeetingUrl")]
        public string OnlineMeetingUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isOnlineMeeting")]
        public bool? IsOnlineMeeting { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown',
        /// 'skypeForBusiness', 'skypeForConsumer', 'teamsForBusiness'
        /// </summary>
        [JsonProperty(PropertyName = "onlineMeetingProvider")]
        public string OnlineMeetingProvider { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onlineMeeting")]
        public MicrosoftgraphonlineMeetingInfo OnlineMeeting { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allowNewTimeProposals")]
        public bool? AllowNewTimeProposals { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public IList<Microsoftgraphattachment> Attachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "singleValueExtendedProperties")]
        public IList<MicrosoftgraphsingleValueLegacyExtendedProperty> SingleValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiValueExtendedProperties")]
        public IList<MicrosoftgraphmultiValueLegacyExtendedProperty> MultiValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendar")]
        public Microsoftgraphcalendar Calendar { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instances")]
        public IList<Microsoftgraphevent> Instances { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<Microsoftgraphextension> Extensions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReminderMinutesBeforeStart > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ReminderMinutesBeforeStart", 2147483647);
            }
            if (ReminderMinutesBeforeStart < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ReminderMinutesBeforeStart", -2147483648);
            }
            if (Recurrence != null)
            {
                Recurrence.Validate();
            }
            if (Attachments != null)
            {
                foreach (var element in Attachments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Instances != null)
            {
                foreach (var element1 in Instances)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
