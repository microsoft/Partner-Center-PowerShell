// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// drive
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphDriveallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphDriveallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphDriveallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphDriveallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphDriveallof1(string driveType = default(string), MicrosoftgraphidentitySet owner = default(MicrosoftgraphidentitySet), Microsoftgraphquota quota = default(Microsoftgraphquota), MicrosoftgraphsharepointIds sharePointIds = default(MicrosoftgraphsharepointIds), object system = default(object), IList<MicrosoftgraphitemActivityOLD> activities = default(IList<MicrosoftgraphitemActivityOLD>), IList<MicrosoftgraphdriveItem> bundles = default(IList<MicrosoftgraphdriveItem>), IList<MicrosoftgraphdriveItem> following = default(IList<MicrosoftgraphdriveItem>), IList<MicrosoftgraphdriveItem> items = default(IList<MicrosoftgraphdriveItem>), Microsoftgraphlist list = default(Microsoftgraphlist), MicrosoftgraphdriveItem root = default(MicrosoftgraphdriveItem), IList<MicrosoftgraphdriveItem> special = default(IList<MicrosoftgraphdriveItem>))
        {
            DriveType = driveType;
            Owner = owner;
            Quota = quota;
            SharePointIds = sharePointIds;
            System = system;
            Activities = activities;
            Bundles = bundles;
            Following = following;
            Items = items;
            List = list;
            Root = root;
            Special = special;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "driveType")]
        public string DriveType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public MicrosoftgraphidentitySet Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quota")]
        public Microsoftgraphquota Quota { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sharePointIds")]
        public MicrosoftgraphsharepointIds SharePointIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "system")]
        public object System { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activities")]
        public IList<MicrosoftgraphitemActivityOLD> Activities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bundles")]
        public IList<MicrosoftgraphdriveItem> Bundles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "following")]
        public IList<MicrosoftgraphdriveItem> Following { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<MicrosoftgraphdriveItem> Items { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "list")]
        public Microsoftgraphlist List { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "root")]
        public MicrosoftgraphdriveItem Root { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "special")]
        public IList<MicrosoftgraphdriveItem> Special { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Activities != null)
            {
                foreach (var element in Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Bundles != null)
            {
                foreach (var element1 in Bundles)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Following != null)
            {
                foreach (var element2 in Following)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Items != null)
            {
                foreach (var element3 in Items)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (List != null)
            {
                List.Validate();
            }
            if (Root != null)
            {
                Root.Validate();
            }
            if (Special != null)
            {
                foreach (var element4 in Special)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
        }
    }
}
