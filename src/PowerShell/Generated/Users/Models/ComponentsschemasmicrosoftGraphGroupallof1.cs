// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// group
    /// </summary>
    /// <remarks>
    /// Represents an Azure Active Directory object. The directoryObject type
    /// is the base type for many other directory entity types.
    /// </remarks>
    public partial class ComponentsschemasmicrosoftGraphGroupallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphGroupallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphGroupallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphGroupallof1 class.
        /// </summary>
        /// <param name="accessType">Possible values include: 'none',
        /// 'private', 'secret', 'public'</param>
        public ComponentsschemasmicrosoftGraphGroupallof1(IList<MicrosoftgraphassignedLabel> assignedLabels = default(IList<MicrosoftgraphassignedLabel>), IList<MicrosoftgraphassignedLicense> assignedLicenses = default(IList<MicrosoftgraphassignedLicense>), string classification = default(string), System.DateTime? createdDateTime = default(System.DateTime?), string description = default(string), string displayName = default(string), IList<string> groupTypes = default(IList<string>), bool? hasMembersWithLicenseErrors = default(bool?), bool? isAssignableToRole = default(bool?), MicrosoftgraphlicenseProcessingState licenseProcessingState = default(MicrosoftgraphlicenseProcessingState), string mail = default(string), bool? mailEnabled = default(bool?), string mailNickname = default(string), string mdmAppId = default(string), string membershipRule = default(string), string membershipRuleProcessingState = default(string), string onPremisesDomainName = default(string), System.DateTime? onPremisesLastSyncDateTime = default(System.DateTime?), string onPremisesNetBiosName = default(string), IList<MicrosoftgraphonPremisesProvisioningError> onPremisesProvisioningErrors = default(IList<MicrosoftgraphonPremisesProvisioningError>), string onPremisesSamAccountName = default(string), string onPremisesSecurityIdentifier = default(string), bool? onPremisesSyncEnabled = default(bool?), string preferredDataLocation = default(string), string preferredLanguage = default(string), IList<string> proxyAddresses = default(IList<string>), System.DateTime? renewedDateTime = default(System.DateTime?), IList<string> resourceBehaviorOptions = default(IList<string>), IList<string> resourceProvisioningOptions = default(IList<string>), bool? securityEnabled = default(bool?), string securityIdentifier = default(string), string theme = default(string), string visibility = default(string), string accessType = default(string), bool? allowExternalSenders = default(bool?), bool? autoSubscribeNewMembers = default(bool?), bool? isFavorite = default(bool?), bool? isSubscribedByMail = default(bool?), int? unseenCount = default(int?), int? unseenConversationsCount = default(int?), int? unseenMessagesCount = default(int?), bool? hideFromOutlookClients = default(bool?), bool? hideFromAddressLists = default(bool?), bool? isArchived = default(bool?), IList<MicrosoftgraphappRoleAssignment> appRoleAssignments = default(IList<MicrosoftgraphappRoleAssignment>), IList<MicrosoftgraphdirectoryObject> members = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> membersWithLicenseErrors = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> memberOf = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> transitiveMembers = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> transitiveMemberOf = default(IList<MicrosoftgraphdirectoryObject>), MicrosoftgraphdirectoryObject createdOnBehalfOf = default(MicrosoftgraphdirectoryObject), IList<MicrosoftgraphdirectoryObject> owners = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectorySetting> settings = default(IList<MicrosoftgraphdirectorySetting>), IList<Microsoftgraphendpoint> endpoints = default(IList<Microsoftgraphendpoint>), IList<MicrosoftgraphresourceSpecificPermissionGrant> permissionGrants = default(IList<MicrosoftgraphresourceSpecificPermissionGrant>), IList<Microsoftgraphconversation> conversations = default(IList<Microsoftgraphconversation>), IList<MicrosoftgraphprofilePhoto> photos = default(IList<MicrosoftgraphprofilePhoto>), IList<MicrosoftgraphdirectoryObject> acceptedSenders = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> rejectedSenders = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphconversationThread> threads = default(IList<MicrosoftgraphconversationThread>), Microsoftgraphcalendar calendar = default(Microsoftgraphcalendar), IList<Microsoftgraphevent> calendarView = default(IList<Microsoftgraphevent>), IList<Microsoftgraphevent> events = default(IList<Microsoftgraphevent>), MicrosoftgraphprofilePhoto photo = default(MicrosoftgraphprofilePhoto), Microsoftgraphdrive drive = default(Microsoftgraphdrive), IList<Microsoftgraphdrive> drives = default(IList<Microsoftgraphdrive>), IList<Microsoftgraphsite> sites = default(IList<Microsoftgraphsite>), IList<Microsoftgraphextension> extensions = default(IList<Microsoftgraphextension>), IList<MicrosoftgraphgroupLifecyclePolicy> groupLifecyclePolicies = default(IList<MicrosoftgraphgroupLifecyclePolicy>), MicrosoftgraphplannerGroup planner = default(MicrosoftgraphplannerGroup), Microsoftgraphonenote onenote = default(Microsoftgraphonenote), Microsoftgraphteam team = default(Microsoftgraphteam), IList<Microsoftgraphchannel> channels = default(IList<Microsoftgraphchannel>))
        {
            AssignedLabels = assignedLabels;
            AssignedLicenses = assignedLicenses;
            Classification = classification;
            CreatedDateTime = createdDateTime;
            Description = description;
            DisplayName = displayName;
            GroupTypes = groupTypes;
            HasMembersWithLicenseErrors = hasMembersWithLicenseErrors;
            IsAssignableToRole = isAssignableToRole;
            LicenseProcessingState = licenseProcessingState;
            Mail = mail;
            MailEnabled = mailEnabled;
            MailNickname = mailNickname;
            MdmAppId = mdmAppId;
            MembershipRule = membershipRule;
            MembershipRuleProcessingState = membershipRuleProcessingState;
            OnPremisesDomainName = onPremisesDomainName;
            OnPremisesLastSyncDateTime = onPremisesLastSyncDateTime;
            OnPremisesNetBiosName = onPremisesNetBiosName;
            OnPremisesProvisioningErrors = onPremisesProvisioningErrors;
            OnPremisesSamAccountName = onPremisesSamAccountName;
            OnPremisesSecurityIdentifier = onPremisesSecurityIdentifier;
            OnPremisesSyncEnabled = onPremisesSyncEnabled;
            PreferredDataLocation = preferredDataLocation;
            PreferredLanguage = preferredLanguage;
            ProxyAddresses = proxyAddresses;
            RenewedDateTime = renewedDateTime;
            ResourceBehaviorOptions = resourceBehaviorOptions;
            ResourceProvisioningOptions = resourceProvisioningOptions;
            SecurityEnabled = securityEnabled;
            SecurityIdentifier = securityIdentifier;
            Theme = theme;
            Visibility = visibility;
            AccessType = accessType;
            AllowExternalSenders = allowExternalSenders;
            AutoSubscribeNewMembers = autoSubscribeNewMembers;
            IsFavorite = isFavorite;
            IsSubscribedByMail = isSubscribedByMail;
            UnseenCount = unseenCount;
            UnseenConversationsCount = unseenConversationsCount;
            UnseenMessagesCount = unseenMessagesCount;
            HideFromOutlookClients = hideFromOutlookClients;
            HideFromAddressLists = hideFromAddressLists;
            IsArchived = isArchived;
            AppRoleAssignments = appRoleAssignments;
            Members = members;
            MembersWithLicenseErrors = membersWithLicenseErrors;
            MemberOf = memberOf;
            TransitiveMembers = transitiveMembers;
            TransitiveMemberOf = transitiveMemberOf;
            CreatedOnBehalfOf = createdOnBehalfOf;
            Owners = owners;
            Settings = settings;
            Endpoints = endpoints;
            PermissionGrants = permissionGrants;
            Conversations = conversations;
            Photos = photos;
            AcceptedSenders = acceptedSenders;
            RejectedSenders = rejectedSenders;
            Threads = threads;
            Calendar = calendar;
            CalendarView = calendarView;
            Events = events;
            Photo = photo;
            Drive = drive;
            Drives = drives;
            Sites = sites;
            Extensions = extensions;
            GroupLifecyclePolicies = groupLifecyclePolicies;
            Planner = planner;
            Onenote = onenote;
            Team = team;
            Channels = channels;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedLabels")]
        public IList<MicrosoftgraphassignedLabel> AssignedLabels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedLicenses")]
        public IList<MicrosoftgraphassignedLicense> AssignedLicenses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "classification")]
        public string Classification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groupTypes")]
        public IList<string> GroupTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasMembersWithLicenseErrors")]
        public bool? HasMembersWithLicenseErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isAssignableToRole")]
        public bool? IsAssignableToRole { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "licenseProcessingState")]
        public MicrosoftgraphlicenseProcessingState LicenseProcessingState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mail")]
        public string Mail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailEnabled")]
        public bool? MailEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailNickname")]
        public string MailNickname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mdmAppId")]
        public string MdmAppId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "membershipRule")]
        public string MembershipRule { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "membershipRuleProcessingState")]
        public string MembershipRuleProcessingState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesDomainName")]
        public string OnPremisesDomainName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesLastSyncDateTime")]
        public System.DateTime? OnPremisesLastSyncDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesNetBiosName")]
        public string OnPremisesNetBiosName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesProvisioningErrors")]
        public IList<MicrosoftgraphonPremisesProvisioningError> OnPremisesProvisioningErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSamAccountName")]
        public string OnPremisesSamAccountName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSecurityIdentifier")]
        public string OnPremisesSecurityIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSyncEnabled")]
        public bool? OnPremisesSyncEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredDataLocation")]
        public string PreferredDataLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredLanguage")]
        public string PreferredLanguage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "proxyAddresses")]
        public IList<string> ProxyAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "renewedDateTime")]
        public System.DateTime? RenewedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resourceBehaviorOptions")]
        public IList<string> ResourceBehaviorOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resourceProvisioningOptions")]
        public IList<string> ResourceProvisioningOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityEnabled")]
        public bool? SecurityEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityIdentifier")]
        public string SecurityIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "theme")]
        public string Theme { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "visibility")]
        public string Visibility { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'private', 'secret',
        /// 'public'
        /// </summary>
        [JsonProperty(PropertyName = "accessType")]
        public string AccessType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allowExternalSenders")]
        public bool? AllowExternalSenders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "autoSubscribeNewMembers")]
        public bool? AutoSubscribeNewMembers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFavorite")]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSubscribedByMail")]
        public bool? IsSubscribedByMail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unseenCount")]
        public int? UnseenCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unseenConversationsCount")]
        public int? UnseenConversationsCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unseenMessagesCount")]
        public int? UnseenMessagesCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hideFromOutlookClients")]
        public bool? HideFromOutlookClients { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hideFromAddressLists")]
        public bool? HideFromAddressLists { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isArchived")]
        public bool? IsArchived { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appRoleAssignments")]
        public IList<MicrosoftgraphappRoleAssignment> AppRoleAssignments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "members")]
        public IList<MicrosoftgraphdirectoryObject> Members { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "membersWithLicenseErrors")]
        public IList<MicrosoftgraphdirectoryObject> MembersWithLicenseErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "memberOf")]
        public IList<MicrosoftgraphdirectoryObject> MemberOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transitiveMembers")]
        public IList<MicrosoftgraphdirectoryObject> TransitiveMembers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transitiveMemberOf")]
        public IList<MicrosoftgraphdirectoryObject> TransitiveMemberOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdOnBehalfOf")]
        public MicrosoftgraphdirectoryObject CreatedOnBehalfOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owners")]
        public IList<MicrosoftgraphdirectoryObject> Owners { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IList<MicrosoftgraphdirectorySetting> Settings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endpoints")]
        public IList<Microsoftgraphendpoint> Endpoints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permissionGrants")]
        public IList<MicrosoftgraphresourceSpecificPermissionGrant> PermissionGrants { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conversations")]
        public IList<Microsoftgraphconversation> Conversations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photos")]
        public IList<MicrosoftgraphprofilePhoto> Photos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "acceptedSenders")]
        public IList<MicrosoftgraphdirectoryObject> AcceptedSenders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rejectedSenders")]
        public IList<MicrosoftgraphdirectoryObject> RejectedSenders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "threads")]
        public IList<MicrosoftgraphconversationThread> Threads { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendar")]
        public Microsoftgraphcalendar Calendar { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendarView")]
        public IList<Microsoftgraphevent> CalendarView { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<Microsoftgraphevent> Events { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photo")]
        public MicrosoftgraphprofilePhoto Photo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "drive")]
        public Microsoftgraphdrive Drive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "drives")]
        public IList<Microsoftgraphdrive> Drives { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sites")]
        public IList<Microsoftgraphsite> Sites { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<Microsoftgraphextension> Extensions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groupLifecyclePolicies")]
        public IList<MicrosoftgraphgroupLifecyclePolicy> GroupLifecyclePolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "planner")]
        public MicrosoftgraphplannerGroup Planner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onenote")]
        public Microsoftgraphonenote Onenote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "team")]
        public Microsoftgraphteam Team { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public IList<Microsoftgraphchannel> Channels { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UnseenCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "UnseenCount", 2147483647);
            }
            if (UnseenCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "UnseenCount", -2147483648);
            }
            if (UnseenConversationsCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "UnseenConversationsCount", 2147483647);
            }
            if (UnseenConversationsCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "UnseenConversationsCount", -2147483648);
            }
            if (UnseenMessagesCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "UnseenMessagesCount", 2147483647);
            }
            if (UnseenMessagesCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "UnseenMessagesCount", -2147483648);
            }
            if (Photos != null)
            {
                foreach (var element in Photos)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (CalendarView != null)
            {
                foreach (var element1 in CalendarView)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Events != null)
            {
                foreach (var element2 in Events)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Photo != null)
            {
                Photo.Validate();
            }
            if (Drive != null)
            {
                Drive.Validate();
            }
            if (Drives != null)
            {
                foreach (var element3 in Drives)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (Sites != null)
            {
                foreach (var element4 in Sites)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (GroupLifecyclePolicies != null)
            {
                foreach (var element5 in GroupLifecyclePolicies)
                {
                    if (element5 != null)
                    {
                        element5.Validate();
                    }
                }
            }
            if (Team != null)
            {
                Team.Validate();
            }
            if (Channels != null)
            {
                foreach (var element6 in Channels)
                {
                    if (element6 != null)
                    {
                        element6.Validate();
                    }
                }
            }
        }
    }
}
