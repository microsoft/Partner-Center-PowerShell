// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// textColumn
    /// </summary>
    public partial class MicrosoftgraphtextColumn
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphtextColumn class.
        /// </summary>
        public MicrosoftgraphtextColumn()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphtextColumn class.
        /// </summary>
        public MicrosoftgraphtextColumn(bool? allowMultipleLines = default(bool?), bool? appendChangesToExistingText = default(bool?), int? linesForEditing = default(int?), int? maxLength = default(int?), string textType = default(string))
        {
            AllowMultipleLines = allowMultipleLines;
            AppendChangesToExistingText = appendChangesToExistingText;
            LinesForEditing = linesForEditing;
            MaxLength = maxLength;
            TextType = textType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allowMultipleLines")]
        public bool? AllowMultipleLines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appendChangesToExistingText")]
        public bool? AppendChangesToExistingText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "linesForEditing")]
        public int? LinesForEditing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxLength")]
        public int? MaxLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "textType")]
        public string TextType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LinesForEditing > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "LinesForEditing", 2147483647);
            }
            if (LinesForEditing < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LinesForEditing", -2147483648);
            }
            if (MaxLength > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxLength", 2147483647);
            }
            if (MaxLength < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxLength", -2147483648);
            }
        }
    }
}
