// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// driveItem
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphDriveitemallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphDriveitemallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphDriveitemallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphDriveitemallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphDriveitemallof1(Microsoftgraphaudio audio = default(Microsoftgraphaudio), Microsoftgraphbundle bundle = default(Microsoftgraphbundle), byte[] content = default(byte[]), string cTag = default(string), Microsoftgraphdeleted deleted = default(Microsoftgraphdeleted), Microsoftgraphfile file = default(Microsoftgraphfile), MicrosoftgraphfileSystemInfo fileSystemInfo = default(MicrosoftgraphfileSystemInfo), Microsoftgraphfolder folder = default(Microsoftgraphfolder), Microsoftgraphimage image = default(Microsoftgraphimage), MicrosoftgraphgeoCoordinates location = default(MicrosoftgraphgeoCoordinates), Microsoftgraphpackage package = default(Microsoftgraphpackage), MicrosoftgraphpendingOperations pendingOperations = default(MicrosoftgraphpendingOperations), Microsoftgraphphoto photo = default(Microsoftgraphphoto), MicrosoftgraphpublicationFacet publication = default(MicrosoftgraphpublicationFacet), MicrosoftgraphremoteItem remoteItem = default(MicrosoftgraphremoteItem), object root = default(object), MicrosoftgraphsearchResult searchResult = default(MicrosoftgraphsearchResult), Microsoftgraphshared shared = default(Microsoftgraphshared), MicrosoftgraphsharepointIds sharepointIds = default(MicrosoftgraphsharepointIds), long? size = default(long?), MicrosoftgraphspecialFolder specialFolder = default(MicrosoftgraphspecialFolder), Microsoftgraphvideo video = default(Microsoftgraphvideo), string webDavUrl = default(string), Microsoftgraphworkbook workbook = default(Microsoftgraphworkbook), IList<MicrosoftgraphitemActivityOLD> activities = default(IList<MicrosoftgraphitemActivityOLD>), MicrosoftgraphitemAnalytics analytics = default(MicrosoftgraphitemAnalytics), IList<MicrosoftgraphdriveItem> children = default(IList<MicrosoftgraphdriveItem>), MicrosoftgraphlistItem listItem = default(MicrosoftgraphlistItem), IList<Microsoftgraphpermission> permissions = default(IList<Microsoftgraphpermission>), IList<Microsoftgraphsubscription> subscriptions = default(IList<Microsoftgraphsubscription>), IList<MicrosoftgraphthumbnailSet> thumbnails = default(IList<MicrosoftgraphthumbnailSet>), IList<MicrosoftgraphdriveItemVersion> versions = default(IList<MicrosoftgraphdriveItemVersion>), Microsoftgraphdocument document = default(Microsoftgraphdocument))
        {
            Audio = audio;
            Bundle = bundle;
            Content = content;
            CTag = cTag;
            Deleted = deleted;
            File = file;
            FileSystemInfo = fileSystemInfo;
            Folder = folder;
            Image = image;
            Location = location;
            Package = package;
            PendingOperations = pendingOperations;
            Photo = photo;
            Publication = publication;
            RemoteItem = remoteItem;
            Root = root;
            SearchResult = searchResult;
            Shared = shared;
            SharepointIds = sharepointIds;
            Size = size;
            SpecialFolder = specialFolder;
            Video = video;
            WebDavUrl = webDavUrl;
            Workbook = workbook;
            Activities = activities;
            Analytics = analytics;
            Children = children;
            ListItem = listItem;
            Permissions = permissions;
            Subscriptions = subscriptions;
            Thumbnails = thumbnails;
            Versions = versions;
            Document = document;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "audio")]
        public Microsoftgraphaudio Audio { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bundle")]
        public Microsoftgraphbundle Bundle { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "content")]
        public byte[] Content { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cTag")]
        public string CTag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deleted")]
        public Microsoftgraphdeleted Deleted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "file")]
        public Microsoftgraphfile File { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileSystemInfo")]
        public MicrosoftgraphfileSystemInfo FileSystemInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "folder")]
        public Microsoftgraphfolder Folder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public Microsoftgraphimage Image { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public MicrosoftgraphgeoCoordinates Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "package")]
        public Microsoftgraphpackage Package { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pendingOperations")]
        public MicrosoftgraphpendingOperations PendingOperations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photo")]
        public Microsoftgraphphoto Photo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publication")]
        public MicrosoftgraphpublicationFacet Publication { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "remoteItem")]
        public MicrosoftgraphremoteItem RemoteItem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "root")]
        public object Root { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchResult")]
        public MicrosoftgraphsearchResult SearchResult { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shared")]
        public Microsoftgraphshared Shared { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sharepointIds")]
        public MicrosoftgraphsharepointIds SharepointIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public long? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "specialFolder")]
        public MicrosoftgraphspecialFolder SpecialFolder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "video")]
        public Microsoftgraphvideo Video { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "webDavUrl")]
        public string WebDavUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "workbook")]
        public Microsoftgraphworkbook Workbook { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activities")]
        public IList<MicrosoftgraphitemActivityOLD> Activities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "analytics")]
        public MicrosoftgraphitemAnalytics Analytics { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<MicrosoftgraphdriveItem> Children { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "listItem")]
        public MicrosoftgraphlistItem ListItem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public IList<Microsoftgraphpermission> Permissions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subscriptions")]
        public IList<Microsoftgraphsubscription> Subscriptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "thumbnails")]
        public IList<MicrosoftgraphthumbnailSet> Thumbnails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "versions")]
        public IList<MicrosoftgraphdriveItemVersion> Versions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "document")]
        public Microsoftgraphdocument Document { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Audio != null)
            {
                Audio.Validate();
            }
            if (Bundle != null)
            {
                Bundle.Validate();
            }
            if (Folder != null)
            {
                Folder.Validate();
            }
            if (Image != null)
            {
                Image.Validate();
            }
            if (Photo != null)
            {
                Photo.Validate();
            }
            if (RemoteItem != null)
            {
                RemoteItem.Validate();
            }
            if (Video != null)
            {
                Video.Validate();
            }
            if (Activities != null)
            {
                foreach (var element in Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Analytics != null)
            {
                Analytics.Validate();
            }
            if (Children != null)
            {
                foreach (var element1 in Children)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (ListItem != null)
            {
                ListItem.Validate();
            }
            if (Thumbnails != null)
            {
                foreach (var element2 in Thumbnails)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
