// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MicrosoftgraphactivityHistoryItem
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphactivityHistoryItem
        /// class.
        /// </summary>
        public MicrosoftgraphactivityHistoryItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphactivityHistoryItem
        /// class.
        /// </summary>
        /// <param name="status">Possible values include: 'active', 'updated',
        /// 'deleted', 'ignored', 'unknownFutureValue'</param>
        public MicrosoftgraphactivityHistoryItem(string id = default(string), string status = default(string), int? activeDurationSeconds = default(int?), System.DateTime? createdDateTime = default(System.DateTime?), System.DateTime? lastActiveDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), System.DateTime? expirationDateTime = default(System.DateTime?), System.DateTime? startedDateTime = default(System.DateTime?), string userTimezone = default(string), MicrosoftgraphuserActivity activity = default(MicrosoftgraphuserActivity))
        {
            Id = id;
            Status = status;
            ActiveDurationSeconds = activeDurationSeconds;
            CreatedDateTime = createdDateTime;
            LastActiveDateTime = lastActiveDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            ExpirationDateTime = expirationDateTime;
            StartedDateTime = startedDateTime;
            UserTimezone = userTimezone;
            Activity = activity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'active', 'updated',
        /// 'deleted', 'ignored', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activeDurationSeconds")]
        public int? ActiveDurationSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastActiveDateTime")]
        public System.DateTime? LastActiveDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expirationDateTime")]
        public System.DateTime? ExpirationDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startedDateTime")]
        public System.DateTime? StartedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userTimezone")]
        public string UserTimezone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activity")]
        public MicrosoftgraphuserActivity Activity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ActiveDurationSeconds > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ActiveDurationSeconds", 2147483647);
            }
            if (ActiveDurationSeconds < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ActiveDurationSeconds", -2147483648);
            }
        }
    }
}
