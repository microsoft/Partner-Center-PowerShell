// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// person
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphPersonallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphPersonallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphPersonallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphPersonallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphPersonallof1(string displayName = default(string), string givenName = default(string), string surname = default(string), string birthday = default(string), string personNotes = default(string), bool? isFavorite = default(bool?), IList<MicrosoftgraphrankedEmailAddress> emailAddresses = default(IList<MicrosoftgraphrankedEmailAddress>), IList<Microsoftgraphphone> phones = default(IList<Microsoftgraphphone>), IList<Microsoftgraphlocation> postalAddresses = default(IList<Microsoftgraphlocation>), IList<Microsoftgraphwebsite> websites = default(IList<Microsoftgraphwebsite>), string title = default(string), string companyName = default(string), string yomiCompany = default(string), string department = default(string), string officeLocation = default(string), string profession = default(string), IList<MicrosoftgraphpersonDataSource> sources = default(IList<MicrosoftgraphpersonDataSource>), string mailboxType = default(string), string personType = default(string), string userPrincipalName = default(string))
        {
            DisplayName = displayName;
            GivenName = givenName;
            Surname = surname;
            Birthday = birthday;
            PersonNotes = personNotes;
            IsFavorite = isFavorite;
            EmailAddresses = emailAddresses;
            Phones = phones;
            PostalAddresses = postalAddresses;
            Websites = websites;
            Title = title;
            CompanyName = companyName;
            YomiCompany = yomiCompany;
            Department = department;
            OfficeLocation = officeLocation;
            Profession = profession;
            Sources = sources;
            MailboxType = mailboxType;
            PersonType = personType;
            UserPrincipalName = userPrincipalName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "givenName")]
        public string GivenName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "surname")]
        public string Surname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "birthday")]
        public string Birthday { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "personNotes")]
        public string PersonNotes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFavorite")]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "emailAddresses")]
        public IList<MicrosoftgraphrankedEmailAddress> EmailAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phones")]
        public IList<Microsoftgraphphone> Phones { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postalAddresses")]
        public IList<Microsoftgraphlocation> PostalAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "websites")]
        public IList<Microsoftgraphwebsite> Websites { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "yomiCompany")]
        public string YomiCompany { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "department")]
        public string Department { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "officeLocation")]
        public string OfficeLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "profession")]
        public string Profession { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        public IList<MicrosoftgraphpersonDataSource> Sources { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailboxType")]
        public string MailboxType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "personType")]
        public string PersonType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

    }
}
