// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// workbookTableRow
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphWorkbooktablerowallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphWorkbooktablerowallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphWorkbooktablerowallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphWorkbooktablerowallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphWorkbooktablerowallof1(int? index = default(int?), object values = default(object))
        {
            Index = index;
            Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "index")]
        public int? Index { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public object Values { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Index > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Index", 2147483647);
            }
            if (Index < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Index", -2147483648);
            }
        }
    }
}
