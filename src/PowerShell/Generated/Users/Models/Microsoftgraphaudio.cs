// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// audio
    /// </summary>
    public partial class Microsoftgraphaudio
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphaudio class.
        /// </summary>
        public Microsoftgraphaudio()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphaudio class.
        /// </summary>
        public Microsoftgraphaudio(string album = default(string), string albumArtist = default(string), string artist = default(string), long? bitrate = default(long?), string composers = default(string), string copyright = default(string), int? disc = default(int?), int? discCount = default(int?), long? duration = default(long?), string genre = default(string), bool? hasDrm = default(bool?), bool? isVariableBitrate = default(bool?), string title = default(string), int? track = default(int?), int? trackCount = default(int?), int? year = default(int?))
        {
            Album = album;
            AlbumArtist = albumArtist;
            Artist = artist;
            Bitrate = bitrate;
            Composers = composers;
            Copyright = copyright;
            Disc = disc;
            DiscCount = discCount;
            Duration = duration;
            Genre = genre;
            HasDrm = hasDrm;
            IsVariableBitrate = isVariableBitrate;
            Title = title;
            Track = track;
            TrackCount = trackCount;
            Year = year;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "album")]
        public string Album { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "albumArtist")]
        public string AlbumArtist { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "artist")]
        public string Artist { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bitrate")]
        public long? Bitrate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "composers")]
        public string Composers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "copyright")]
        public string Copyright { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disc")]
        public int? Disc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "discCount")]
        public int? DiscCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public long? Duration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "genre")]
        public string Genre { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasDrm")]
        public bool? HasDrm { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVariableBitrate")]
        public bool? IsVariableBitrate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "track")]
        public int? Track { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackCount")]
        public int? TrackCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "year")]
        public int? Year { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Disc > 32767)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Disc", 32767);
            }
            if (Disc < -32768)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Disc", -32768);
            }
            if (DiscCount > 32767)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DiscCount", 32767);
            }
            if (DiscCount < -32768)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DiscCount", -32768);
            }
            if (Track > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Track", 2147483647);
            }
            if (Track < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Track", -2147483648);
            }
            if (TrackCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "TrackCount", 2147483647);
            }
            if (TrackCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TrackCount", -2147483648);
            }
            if (Year > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Year", 2147483647);
            }
            if (Year < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Year", -2147483648);
            }
        }
    }
}
