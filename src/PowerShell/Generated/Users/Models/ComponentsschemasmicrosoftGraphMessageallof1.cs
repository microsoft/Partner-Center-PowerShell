// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// message
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphMessageallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphMessageallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphMessageallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphMessageallof1 class.
        /// </summary>
        /// <param name="importance">Possible values include: 'low', 'normal',
        /// 'high'</param>
        /// <param name="inferenceClassification">Possible values include:
        /// 'focused', 'other'</param>
        public ComponentsschemasmicrosoftGraphMessageallof1(System.DateTime? receivedDateTime = default(System.DateTime?), System.DateTime? sentDateTime = default(System.DateTime?), bool? hasAttachments = default(bool?), string internetMessageId = default(string), IList<MicrosoftgraphinternetMessageHeader> internetMessageHeaders = default(IList<MicrosoftgraphinternetMessageHeader>), string subject = default(string), MicrosoftgraphitemBody body = default(MicrosoftgraphitemBody), string bodyPreview = default(string), string importance = default(string), string parentFolderId = default(string), Microsoftgraphrecipient sender = default(Microsoftgraphrecipient), Microsoftgraphrecipient fromProperty = default(Microsoftgraphrecipient), IList<Microsoftgraphrecipient> toRecipients = default(IList<Microsoftgraphrecipient>), IList<Microsoftgraphrecipient> ccRecipients = default(IList<Microsoftgraphrecipient>), IList<Microsoftgraphrecipient> bccRecipients = default(IList<Microsoftgraphrecipient>), IList<Microsoftgraphrecipient> replyTo = default(IList<Microsoftgraphrecipient>), string conversationId = default(string), byte[] conversationIndex = default(byte[]), MicrosoftgraphitemBody uniqueBody = default(MicrosoftgraphitemBody), bool? isDeliveryReceiptRequested = default(bool?), bool? isReadReceiptRequested = default(bool?), bool? isRead = default(bool?), bool? isDraft = default(bool?), string webLink = default(string), MicrosoftgraphmentionsPreview mentionsPreview = default(MicrosoftgraphmentionsPreview), string inferenceClassification = default(string), IList<string> unsubscribeData = default(IList<string>), bool? unsubscribeEnabled = default(bool?), MicrosoftgraphfollowupFlag flag = default(MicrosoftgraphfollowupFlag), IList<MicrosoftgraphsingleValueLegacyExtendedProperty> singleValueExtendedProperties = default(IList<MicrosoftgraphsingleValueLegacyExtendedProperty>), IList<MicrosoftgraphmultiValueLegacyExtendedProperty> multiValueExtendedProperties = default(IList<MicrosoftgraphmultiValueLegacyExtendedProperty>), IList<Microsoftgraphattachment> attachments = default(IList<Microsoftgraphattachment>), IList<Microsoftgraphextension> extensions = default(IList<Microsoftgraphextension>), IList<Microsoftgraphmention> mentions = default(IList<Microsoftgraphmention>))
        {
            ReceivedDateTime = receivedDateTime;
            SentDateTime = sentDateTime;
            HasAttachments = hasAttachments;
            InternetMessageId = internetMessageId;
            InternetMessageHeaders = internetMessageHeaders;
            Subject = subject;
            Body = body;
            BodyPreview = bodyPreview;
            Importance = importance;
            ParentFolderId = parentFolderId;
            Sender = sender;
            FromProperty = fromProperty;
            ToRecipients = toRecipients;
            CcRecipients = ccRecipients;
            BccRecipients = bccRecipients;
            ReplyTo = replyTo;
            ConversationId = conversationId;
            ConversationIndex = conversationIndex;
            UniqueBody = uniqueBody;
            IsDeliveryReceiptRequested = isDeliveryReceiptRequested;
            IsReadReceiptRequested = isReadReceiptRequested;
            IsRead = isRead;
            IsDraft = isDraft;
            WebLink = webLink;
            MentionsPreview = mentionsPreview;
            InferenceClassification = inferenceClassification;
            UnsubscribeData = unsubscribeData;
            UnsubscribeEnabled = unsubscribeEnabled;
            Flag = flag;
            SingleValueExtendedProperties = singleValueExtendedProperties;
            MultiValueExtendedProperties = multiValueExtendedProperties;
            Attachments = attachments;
            Extensions = extensions;
            Mentions = mentions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "receivedDateTime")]
        public System.DateTime? ReceivedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentDateTime")]
        public System.DateTime? SentDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasAttachments")]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internetMessageId")]
        public string InternetMessageId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internetMessageHeaders")]
        public IList<MicrosoftgraphinternetMessageHeader> InternetMessageHeaders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "body")]
        public MicrosoftgraphitemBody Body { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bodyPreview")]
        public string BodyPreview { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "importance")]
        public string Importance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentFolderId")]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sender")]
        public Microsoftgraphrecipient Sender { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public Microsoftgraphrecipient FromProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "toRecipients")]
        public IList<Microsoftgraphrecipient> ToRecipients { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ccRecipients")]
        public IList<Microsoftgraphrecipient> CcRecipients { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bccRecipients")]
        public IList<Microsoftgraphrecipient> BccRecipients { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "replyTo")]
        public IList<Microsoftgraphrecipient> ReplyTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conversationId")]
        public string ConversationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "conversationIndex")]
        public byte[] ConversationIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uniqueBody")]
        public MicrosoftgraphitemBody UniqueBody { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDeliveryReceiptRequested")]
        public bool? IsDeliveryReceiptRequested { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReadReceiptRequested")]
        public bool? IsReadReceiptRequested { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isRead")]
        public bool? IsRead { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDraft")]
        public bool? IsDraft { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "webLink")]
        public string WebLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mentionsPreview")]
        public MicrosoftgraphmentionsPreview MentionsPreview { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'focused', 'other'
        /// </summary>
        [JsonProperty(PropertyName = "inferenceClassification")]
        public string InferenceClassification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unsubscribeData")]
        public IList<string> UnsubscribeData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unsubscribeEnabled")]
        public bool? UnsubscribeEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flag")]
        public MicrosoftgraphfollowupFlag Flag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "singleValueExtendedProperties")]
        public IList<MicrosoftgraphsingleValueLegacyExtendedProperty> SingleValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiValueExtendedProperties")]
        public IList<MicrosoftgraphmultiValueLegacyExtendedProperty> MultiValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public IList<Microsoftgraphattachment> Attachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<Microsoftgraphextension> Extensions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mentions")]
        public IList<Microsoftgraphmention> Mentions { get; set; }

    }
}
