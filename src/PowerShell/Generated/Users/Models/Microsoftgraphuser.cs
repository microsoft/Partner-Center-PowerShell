// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Microsoftgraphuser
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphuser class.
        /// </summary>
        public Microsoftgraphuser()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphuser class.
        /// </summary>
        /// <param name="deviceEnrollmentLimit">The limit on the maximum number
        /// of devices that the user is permitted to enroll. Allowed values are
        /// 5 or 1000.</param>
        public Microsoftgraphuser(string id = default(string), System.DateTime? deletedDateTime = default(System.DateTime?), MicrosoftgraphsignInActivity signInActivity = default(MicrosoftgraphsignInActivity), bool? accountEnabled = default(bool?), string ageGroup = default(string), IList<MicrosoftgraphassignedLicense> assignedLicenses = default(IList<MicrosoftgraphassignedLicense>), IList<MicrosoftgraphassignedPlan> assignedPlans = default(IList<MicrosoftgraphassignedPlan>), IList<string> businessPhones = default(IList<string>), string city = default(string), string companyName = default(string), string consentProvidedForMinor = default(string), string country = default(string), System.DateTime? createdDateTime = default(System.DateTime?), string department = default(string), IList<MicrosoftgraphdeviceKey> deviceKeys = default(IList<MicrosoftgraphdeviceKey>), string displayName = default(string), string employeeId = default(string), string faxNumber = default(string), string givenName = default(string), IList<MicrosoftgraphobjectIdentity> identities = default(IList<MicrosoftgraphobjectIdentity>), IList<string> imAddresses = default(IList<string>), bool? isResourceAccount = default(bool?), string jobTitle = default(string), System.DateTime? lastPasswordChangeDateTime = default(System.DateTime?), string legalAgeGroupClassification = default(string), IList<MicrosoftgraphlicenseAssignmentState> licenseAssignmentStates = default(IList<MicrosoftgraphlicenseAssignmentState>), string mail = default(string), string mailNickname = default(string), string mobilePhone = default(string), string onPremisesDistinguishedName = default(string), MicrosoftgraphonPremisesExtensionAttributes onPremisesExtensionAttributes = default(MicrosoftgraphonPremisesExtensionAttributes), string onPremisesImmutableId = default(string), System.DateTime? onPremisesLastSyncDateTime = default(System.DateTime?), IList<MicrosoftgraphonPremisesProvisioningError> onPremisesProvisioningErrors = default(IList<MicrosoftgraphonPremisesProvisioningError>), string onPremisesSecurityIdentifier = default(string), bool? onPremisesSyncEnabled = default(bool?), string onPremisesDomainName = default(string), string onPremisesSamAccountName = default(string), string onPremisesUserPrincipalName = default(string), IList<string> otherMails = default(IList<string>), string passwordPolicies = default(string), MicrosoftgraphpasswordProfile passwordProfile = default(MicrosoftgraphpasswordProfile), string officeLocation = default(string), string postalCode = default(string), string preferredDataLocation = default(string), string preferredLanguage = default(string), IList<MicrosoftgraphprovisionedPlan> provisionedPlans = default(IList<MicrosoftgraphprovisionedPlan>), IList<string> proxyAddresses = default(IList<string>), System.DateTime? refreshTokensValidFromDateTime = default(System.DateTime?), bool? showInAddressList = default(bool?), System.DateTime? signInSessionsValidFromDateTime = default(System.DateTime?), string state = default(string), string streetAddress = default(string), string surname = default(string), string usageLocation = default(string), string userPrincipalName = default(string), string externalUserState = default(string), string externalUserStateChangeDateTime = default(string), string userType = default(string), MicrosoftgraphmailboxSettings mailboxSettings = default(MicrosoftgraphmailboxSettings), MicrosoftgraphidentityUserRisk identityUserRisk = default(MicrosoftgraphidentityUserRisk), int? deviceEnrollmentLimit = default(int?), string aboutMe = default(string), System.DateTime? birthday = default(System.DateTime?), System.DateTime? hireDate = default(System.DateTime?), IList<string> interests = default(IList<string>), string mySite = default(string), IList<string> pastProjects = default(IList<string>), string preferredName = default(string), IList<string> responsibilities = default(IList<string>), IList<string> schools = default(IList<string>), IList<string> skills = default(IList<string>), MicrosoftgraphuserAnalytics analytics = default(MicrosoftgraphuserAnalytics), MicrosoftgraphinformationProtection informationProtection = default(MicrosoftgraphinformationProtection), IList<MicrosoftgraphappRoleAssignment> appRoleAssignments = default(IList<MicrosoftgraphappRoleAssignment>), IList<MicrosoftgraphdirectoryObject> createdObjects = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> directReports = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphlicenseDetails> licenseDetails = default(IList<MicrosoftgraphlicenseDetails>), MicrosoftgraphdirectoryObject manager = default(MicrosoftgraphdirectoryObject), IList<MicrosoftgraphdirectoryObject> memberOf = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> ownedDevices = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> ownedObjects = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> registeredDevices = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphscopedRoleMembership> scopedRoleMemberOf = default(IList<MicrosoftgraphscopedRoleMembership>), IList<MicrosoftgraphdirectoryObject> transitiveMemberOf = default(IList<MicrosoftgraphdirectoryObject>), MicrosoftgraphoutlookUser outlook = default(MicrosoftgraphoutlookUser), IList<Microsoftgraphmessage> messages = default(IList<Microsoftgraphmessage>), IList<Microsoftgraphgroup> joinedGroups = default(IList<Microsoftgraphgroup>), IList<MicrosoftgraphmailFolder> mailFolders = default(IList<MicrosoftgraphmailFolder>), Microsoftgraphcalendar calendar = default(Microsoftgraphcalendar), IList<Microsoftgraphcalendar> calendars = default(IList<Microsoftgraphcalendar>), IList<MicrosoftgraphcalendarGroup> calendarGroups = default(IList<MicrosoftgraphcalendarGroup>), IList<Microsoftgraphevent> calendarView = default(IList<Microsoftgraphevent>), IList<Microsoftgraphevent> events = default(IList<Microsoftgraphevent>), IList<Microsoftgraphperson> people = default(IList<Microsoftgraphperson>), IList<Microsoftgraphcontact> contacts = default(IList<Microsoftgraphcontact>), IList<MicrosoftgraphcontactFolder> contactFolders = default(IList<MicrosoftgraphcontactFolder>), MicrosoftgraphinferenceClassification inferenceClassification = default(MicrosoftgraphinferenceClassification), MicrosoftgraphprofilePhoto photo = default(MicrosoftgraphprofilePhoto), IList<MicrosoftgraphprofilePhoto> photos = default(IList<MicrosoftgraphprofilePhoto>), Microsoftgraphdrive drive = default(Microsoftgraphdrive), IList<Microsoftgraphdrive> drives = default(IList<Microsoftgraphdrive>), IList<Microsoftgraphsite> followedSites = default(IList<Microsoftgraphsite>), IList<Microsoftgraphextension> extensions = default(IList<Microsoftgraphextension>), IList<MicrosoftgraphagreementAcceptance> agreementAcceptances = default(IList<MicrosoftgraphagreementAcceptance>), IList<MicrosoftgraphdeviceEnrollmentConfiguration> deviceEnrollmentConfigurations = default(IList<MicrosoftgraphdeviceEnrollmentConfiguration>), IList<MicrosoftgraphmanagedDevice> managedDevices = default(IList<MicrosoftgraphmanagedDevice>), IList<MicrosoftgraphmanagedAppRegistration> managedAppRegistrations = default(IList<MicrosoftgraphmanagedAppRegistration>), IList<MicrosoftgraphwindowsInformationProtectionDeviceRegistration> windowsInformationProtectionDeviceRegistrations = default(IList<MicrosoftgraphwindowsInformationProtectionDeviceRegistration>), IList<MicrosoftgraphdeviceManagementTroubleshootingEvent> deviceManagementTroubleshootingEvents = default(IList<MicrosoftgraphdeviceManagementTroubleshootingEvent>), IList<MicrosoftgraphmobileAppIntentAndState> mobileAppIntentAndStates = default(IList<MicrosoftgraphmobileAppIntentAndState>), IList<MicrosoftgraphmobileAppTroubleshootingEvent> mobileAppTroubleshootingEvents = default(IList<MicrosoftgraphmobileAppTroubleshootingEvent>), IList<Microsoftgraphnotification> notifications = default(IList<Microsoftgraphnotification>), MicrosoftgraphplannerUser planner = default(MicrosoftgraphplannerUser), MicrosoftgraphofficeGraphInsights insights = default(MicrosoftgraphofficeGraphInsights), MicrosoftgraphuserSettings settings = default(MicrosoftgraphuserSettings), Microsoftgraphonenote onenote = default(Microsoftgraphonenote), Microsoftgraphprofile profile = default(Microsoftgraphprofile), IList<MicrosoftgraphuserActivity> activities = default(IList<MicrosoftgraphuserActivity>), IList<Microsoftgraphdevice> devices = default(IList<Microsoftgraphdevice>), IList<MicrosoftgraphonlineMeeting> onlineMeetings = default(IList<MicrosoftgraphonlineMeeting>), Microsoftgraphpresence presence = default(Microsoftgraphpresence), IList<Microsoftgraphteam> joinedTeams = default(IList<Microsoftgraphteam>), MicrosoftgraphuserTeamwork teamwork = default(MicrosoftgraphuserTeamwork), IList<Microsoftgraphchat> chats = default(IList<Microsoftgraphchat>))
        {
            Id = id;
            DeletedDateTime = deletedDateTime;
            SignInActivity = signInActivity;
            AccountEnabled = accountEnabled;
            AgeGroup = ageGroup;
            AssignedLicenses = assignedLicenses;
            AssignedPlans = assignedPlans;
            BusinessPhones = businessPhones;
            City = city;
            CompanyName = companyName;
            ConsentProvidedForMinor = consentProvidedForMinor;
            Country = country;
            CreatedDateTime = createdDateTime;
            Department = department;
            DeviceKeys = deviceKeys;
            DisplayName = displayName;
            EmployeeId = employeeId;
            FaxNumber = faxNumber;
            GivenName = givenName;
            Identities = identities;
            ImAddresses = imAddresses;
            IsResourceAccount = isResourceAccount;
            JobTitle = jobTitle;
            LastPasswordChangeDateTime = lastPasswordChangeDateTime;
            LegalAgeGroupClassification = legalAgeGroupClassification;
            LicenseAssignmentStates = licenseAssignmentStates;
            Mail = mail;
            MailNickname = mailNickname;
            MobilePhone = mobilePhone;
            OnPremisesDistinguishedName = onPremisesDistinguishedName;
            OnPremisesExtensionAttributes = onPremisesExtensionAttributes;
            OnPremisesImmutableId = onPremisesImmutableId;
            OnPremisesLastSyncDateTime = onPremisesLastSyncDateTime;
            OnPremisesProvisioningErrors = onPremisesProvisioningErrors;
            OnPremisesSecurityIdentifier = onPremisesSecurityIdentifier;
            OnPremisesSyncEnabled = onPremisesSyncEnabled;
            OnPremisesDomainName = onPremisesDomainName;
            OnPremisesSamAccountName = onPremisesSamAccountName;
            OnPremisesUserPrincipalName = onPremisesUserPrincipalName;
            OtherMails = otherMails;
            PasswordPolicies = passwordPolicies;
            PasswordProfile = passwordProfile;
            OfficeLocation = officeLocation;
            PostalCode = postalCode;
            PreferredDataLocation = preferredDataLocation;
            PreferredLanguage = preferredLanguage;
            ProvisionedPlans = provisionedPlans;
            ProxyAddresses = proxyAddresses;
            RefreshTokensValidFromDateTime = refreshTokensValidFromDateTime;
            ShowInAddressList = showInAddressList;
            SignInSessionsValidFromDateTime = signInSessionsValidFromDateTime;
            State = state;
            StreetAddress = streetAddress;
            Surname = surname;
            UsageLocation = usageLocation;
            UserPrincipalName = userPrincipalName;
            ExternalUserState = externalUserState;
            ExternalUserStateChangeDateTime = externalUserStateChangeDateTime;
            UserType = userType;
            MailboxSettings = mailboxSettings;
            IdentityUserRisk = identityUserRisk;
            DeviceEnrollmentLimit = deviceEnrollmentLimit;
            AboutMe = aboutMe;
            Birthday = birthday;
            HireDate = hireDate;
            Interests = interests;
            MySite = mySite;
            PastProjects = pastProjects;
            PreferredName = preferredName;
            Responsibilities = responsibilities;
            Schools = schools;
            Skills = skills;
            Analytics = analytics;
            InformationProtection = informationProtection;
            AppRoleAssignments = appRoleAssignments;
            CreatedObjects = createdObjects;
            DirectReports = directReports;
            LicenseDetails = licenseDetails;
            Manager = manager;
            MemberOf = memberOf;
            OwnedDevices = ownedDevices;
            OwnedObjects = ownedObjects;
            RegisteredDevices = registeredDevices;
            ScopedRoleMemberOf = scopedRoleMemberOf;
            TransitiveMemberOf = transitiveMemberOf;
            Outlook = outlook;
            Messages = messages;
            JoinedGroups = joinedGroups;
            MailFolders = mailFolders;
            Calendar = calendar;
            Calendars = calendars;
            CalendarGroups = calendarGroups;
            CalendarView = calendarView;
            Events = events;
            People = people;
            Contacts = contacts;
            ContactFolders = contactFolders;
            InferenceClassification = inferenceClassification;
            Photo = photo;
            Photos = photos;
            Drive = drive;
            Drives = drives;
            FollowedSites = followedSites;
            Extensions = extensions;
            AgreementAcceptances = agreementAcceptances;
            DeviceEnrollmentConfigurations = deviceEnrollmentConfigurations;
            ManagedDevices = managedDevices;
            ManagedAppRegistrations = managedAppRegistrations;
            WindowsInformationProtectionDeviceRegistrations = windowsInformationProtectionDeviceRegistrations;
            DeviceManagementTroubleshootingEvents = deviceManagementTroubleshootingEvents;
            MobileAppIntentAndStates = mobileAppIntentAndStates;
            MobileAppTroubleshootingEvents = mobileAppTroubleshootingEvents;
            Notifications = notifications;
            Planner = planner;
            Insights = insights;
            Settings = settings;
            Onenote = onenote;
            Profile = profile;
            Activities = activities;
            Devices = devices;
            OnlineMeetings = onlineMeetings;
            Presence = presence;
            JoinedTeams = joinedTeams;
            Teamwork = teamwork;
            Chats = chats;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deletedDateTime")]
        public System.DateTime? DeletedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "signInActivity")]
        public MicrosoftgraphsignInActivity SignInActivity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accountEnabled")]
        public bool? AccountEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ageGroup")]
        public string AgeGroup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedLicenses")]
        public IList<MicrosoftgraphassignedLicense> AssignedLicenses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedPlans")]
        public IList<MicrosoftgraphassignedPlan> AssignedPlans { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "businessPhones")]
        public IList<string> BusinessPhones { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "consentProvidedForMinor")]
        public string ConsentProvidedForMinor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "department")]
        public string Department { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceKeys")]
        public IList<MicrosoftgraphdeviceKey> DeviceKeys { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "faxNumber")]
        public string FaxNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "givenName")]
        public string GivenName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "identities")]
        public IList<MicrosoftgraphobjectIdentity> Identities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imAddresses")]
        public IList<string> ImAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isResourceAccount")]
        public bool? IsResourceAccount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobTitle")]
        public string JobTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastPasswordChangeDateTime")]
        public System.DateTime? LastPasswordChangeDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "legalAgeGroupClassification")]
        public string LegalAgeGroupClassification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "licenseAssignmentStates")]
        public IList<MicrosoftgraphlicenseAssignmentState> LicenseAssignmentStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mail")]
        public string Mail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailNickname")]
        public string MailNickname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesDistinguishedName")]
        public string OnPremisesDistinguishedName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesExtensionAttributes")]
        public MicrosoftgraphonPremisesExtensionAttributes OnPremisesExtensionAttributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesImmutableId")]
        public string OnPremisesImmutableId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesLastSyncDateTime")]
        public System.DateTime? OnPremisesLastSyncDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesProvisioningErrors")]
        public IList<MicrosoftgraphonPremisesProvisioningError> OnPremisesProvisioningErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSecurityIdentifier")]
        public string OnPremisesSecurityIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSyncEnabled")]
        public bool? OnPremisesSyncEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesDomainName")]
        public string OnPremisesDomainName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSamAccountName")]
        public string OnPremisesSamAccountName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesUserPrincipalName")]
        public string OnPremisesUserPrincipalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "otherMails")]
        public IList<string> OtherMails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordPolicies")]
        public string PasswordPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordProfile")]
        public MicrosoftgraphpasswordProfile PasswordProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "officeLocation")]
        public string OfficeLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredDataLocation")]
        public string PreferredDataLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredLanguage")]
        public string PreferredLanguage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisionedPlans")]
        public IList<MicrosoftgraphprovisionedPlan> ProvisionedPlans { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "proxyAddresses")]
        public IList<string> ProxyAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "refreshTokensValidFromDateTime")]
        public System.DateTime? RefreshTokensValidFromDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "showInAddressList")]
        public bool? ShowInAddressList { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "signInSessionsValidFromDateTime")]
        public System.DateTime? SignInSessionsValidFromDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "surname")]
        public string Surname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "usageLocation")]
        public string UsageLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalUserState")]
        public string ExternalUserState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalUserStateChangeDateTime")]
        public string ExternalUserStateChangeDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userType")]
        public string UserType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailboxSettings")]
        public MicrosoftgraphmailboxSettings MailboxSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "identityUserRisk")]
        public MicrosoftgraphidentityUserRisk IdentityUserRisk { get; set; }

        /// <summary>
        /// Gets or sets the limit on the maximum number of devices that the
        /// user is permitted to enroll. Allowed values are 5 or 1000.
        /// </summary>
        [JsonProperty(PropertyName = "deviceEnrollmentLimit")]
        public int? DeviceEnrollmentLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aboutMe")]
        public string AboutMe { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "birthday")]
        public System.DateTime? Birthday { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hireDate")]
        public System.DateTime? HireDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "interests")]
        public IList<string> Interests { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mySite")]
        public string MySite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pastProjects")]
        public IList<string> PastProjects { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredName")]
        public string PreferredName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responsibilities")]
        public IList<string> Responsibilities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schools")]
        public IList<string> Schools { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "skills")]
        public IList<string> Skills { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "analytics")]
        public MicrosoftgraphuserAnalytics Analytics { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "informationProtection")]
        public MicrosoftgraphinformationProtection InformationProtection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appRoleAssignments")]
        public IList<MicrosoftgraphappRoleAssignment> AppRoleAssignments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdObjects")]
        public IList<MicrosoftgraphdirectoryObject> CreatedObjects { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "directReports")]
        public IList<MicrosoftgraphdirectoryObject> DirectReports { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "licenseDetails")]
        public IList<MicrosoftgraphlicenseDetails> LicenseDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manager")]
        public MicrosoftgraphdirectoryObject Manager { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "memberOf")]
        public IList<MicrosoftgraphdirectoryObject> MemberOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownedDevices")]
        public IList<MicrosoftgraphdirectoryObject> OwnedDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownedObjects")]
        public IList<MicrosoftgraphdirectoryObject> OwnedObjects { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "registeredDevices")]
        public IList<MicrosoftgraphdirectoryObject> RegisteredDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scopedRoleMemberOf")]
        public IList<MicrosoftgraphscopedRoleMembership> ScopedRoleMemberOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transitiveMemberOf")]
        public IList<MicrosoftgraphdirectoryObject> TransitiveMemberOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outlook")]
        public MicrosoftgraphoutlookUser Outlook { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messages")]
        public IList<Microsoftgraphmessage> Messages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "joinedGroups")]
        public IList<Microsoftgraphgroup> JoinedGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mailFolders")]
        public IList<MicrosoftgraphmailFolder> MailFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendar")]
        public Microsoftgraphcalendar Calendar { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendars")]
        public IList<Microsoftgraphcalendar> Calendars { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendarGroups")]
        public IList<MicrosoftgraphcalendarGroup> CalendarGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calendarView")]
        public IList<Microsoftgraphevent> CalendarView { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<Microsoftgraphevent> Events { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "people")]
        public IList<Microsoftgraphperson> People { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contacts")]
        public IList<Microsoftgraphcontact> Contacts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contactFolders")]
        public IList<MicrosoftgraphcontactFolder> ContactFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inferenceClassification")]
        public MicrosoftgraphinferenceClassification InferenceClassification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photo")]
        public MicrosoftgraphprofilePhoto Photo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photos")]
        public IList<MicrosoftgraphprofilePhoto> Photos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "drive")]
        public Microsoftgraphdrive Drive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "drives")]
        public IList<Microsoftgraphdrive> Drives { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "followedSites")]
        public IList<Microsoftgraphsite> FollowedSites { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<Microsoftgraphextension> Extensions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agreementAcceptances")]
        public IList<MicrosoftgraphagreementAcceptance> AgreementAcceptances { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceEnrollmentConfigurations")]
        public IList<MicrosoftgraphdeviceEnrollmentConfiguration> DeviceEnrollmentConfigurations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedDevices")]
        public IList<MicrosoftgraphmanagedDevice> ManagedDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedAppRegistrations")]
        public IList<MicrosoftgraphmanagedAppRegistration> ManagedAppRegistrations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "windowsInformationProtectionDeviceRegistrations")]
        public IList<MicrosoftgraphwindowsInformationProtectionDeviceRegistration> WindowsInformationProtectionDeviceRegistrations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceManagementTroubleshootingEvents")]
        public IList<MicrosoftgraphdeviceManagementTroubleshootingEvent> DeviceManagementTroubleshootingEvents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobileAppIntentAndStates")]
        public IList<MicrosoftgraphmobileAppIntentAndState> MobileAppIntentAndStates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobileAppTroubleshootingEvents")]
        public IList<MicrosoftgraphmobileAppTroubleshootingEvent> MobileAppTroubleshootingEvents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notifications")]
        public IList<Microsoftgraphnotification> Notifications { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "planner")]
        public MicrosoftgraphplannerUser Planner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "insights")]
        public MicrosoftgraphofficeGraphInsights Insights { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public MicrosoftgraphuserSettings Settings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onenote")]
        public Microsoftgraphonenote Onenote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "profile")]
        public Microsoftgraphprofile Profile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activities")]
        public IList<MicrosoftgraphuserActivity> Activities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "devices")]
        public IList<Microsoftgraphdevice> Devices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onlineMeetings")]
        public IList<MicrosoftgraphonlineMeeting> OnlineMeetings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "presence")]
        public Microsoftgraphpresence Presence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "joinedTeams")]
        public IList<Microsoftgraphteam> JoinedTeams { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "teamwork")]
        public MicrosoftgraphuserTeamwork Teamwork { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "chats")]
        public IList<Microsoftgraphchat> Chats { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DeviceEnrollmentLimit > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DeviceEnrollmentLimit", 2147483647);
            }
            if (DeviceEnrollmentLimit < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DeviceEnrollmentLimit", -2147483648);
            }
            if (JoinedGroups != null)
            {
                foreach (var element in JoinedGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (MailFolders != null)
            {
                foreach (var element1 in MailFolders)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (CalendarView != null)
            {
                foreach (var element2 in CalendarView)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Events != null)
            {
                foreach (var element3 in Events)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (Contacts != null)
            {
                foreach (var element4 in Contacts)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (Photo != null)
            {
                Photo.Validate();
            }
            if (Photos != null)
            {
                foreach (var element5 in Photos)
                {
                    if (element5 != null)
                    {
                        element5.Validate();
                    }
                }
            }
            if (Drive != null)
            {
                Drive.Validate();
            }
            if (Drives != null)
            {
                foreach (var element6 in Drives)
                {
                    if (element6 != null)
                    {
                        element6.Validate();
                    }
                }
            }
            if (FollowedSites != null)
            {
                foreach (var element7 in FollowedSites)
                {
                    if (element7 != null)
                    {
                        element7.Validate();
                    }
                }
            }
            if (DeviceEnrollmentConfigurations != null)
            {
                foreach (var element8 in DeviceEnrollmentConfigurations)
                {
                    if (element8 != null)
                    {
                        element8.Validate();
                    }
                }
            }
            if (ManagedDevices != null)
            {
                foreach (var element9 in ManagedDevices)
                {
                    if (element9 != null)
                    {
                        element9.Validate();
                    }
                }
            }
            if (Notifications != null)
            {
                foreach (var element10 in Notifications)
                {
                    if (element10 != null)
                    {
                        element10.Validate();
                    }
                }
            }
            if (Devices != null)
            {
                foreach (var element11 in Devices)
                {
                    if (element11 != null)
                    {
                        element11.Validate();
                    }
                }
            }
            if (JoinedTeams != null)
            {
                foreach (var element12 in JoinedTeams)
                {
                    if (element12 != null)
                    {
                        element12.Validate();
                    }
                }
            }
        }
    }
}
