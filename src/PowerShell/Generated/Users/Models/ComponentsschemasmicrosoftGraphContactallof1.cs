// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// contact
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphContactallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphContactallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphContactallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphContactallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphContactallof1(string parentFolderId = default(string), System.DateTime? birthday = default(System.DateTime?), string fileAs = default(string), string displayName = default(string), string givenName = default(string), string initials = default(string), string middleName = default(string), string nickName = default(string), string surname = default(string), string title = default(string), string yomiGivenName = default(string), string yomiSurname = default(string), string yomiCompanyName = default(string), string generation = default(string), IList<MicrosoftgraphtypedEmailAddress> emailAddresses = default(IList<MicrosoftgraphtypedEmailAddress>), IList<Microsoftgraphwebsite> websites = default(IList<Microsoftgraphwebsite>), IList<string> imAddresses = default(IList<string>), string jobTitle = default(string), string companyName = default(string), string department = default(string), string officeLocation = default(string), string profession = default(string), string assistantName = default(string), string manager = default(string), IList<Microsoftgraphphone> phones = default(IList<Microsoftgraphphone>), IList<MicrosoftgraphphysicalAddress> postalAddresses = default(IList<MicrosoftgraphphysicalAddress>), string spouseName = default(string), string personalNotes = default(string), IList<string> children = default(IList<string>), System.DateTime? weddingAnniversary = default(System.DateTime?), string gender = default(string), bool? isFavorite = default(bool?), MicrosoftgraphfollowupFlag flag = default(MicrosoftgraphfollowupFlag), IList<MicrosoftgraphsingleValueLegacyExtendedProperty> singleValueExtendedProperties = default(IList<MicrosoftgraphsingleValueLegacyExtendedProperty>), IList<MicrosoftgraphmultiValueLegacyExtendedProperty> multiValueExtendedProperties = default(IList<MicrosoftgraphmultiValueLegacyExtendedProperty>), MicrosoftgraphprofilePhoto photo = default(MicrosoftgraphprofilePhoto), IList<Microsoftgraphextension> extensions = default(IList<Microsoftgraphextension>))
        {
            ParentFolderId = parentFolderId;
            Birthday = birthday;
            FileAs = fileAs;
            DisplayName = displayName;
            GivenName = givenName;
            Initials = initials;
            MiddleName = middleName;
            NickName = nickName;
            Surname = surname;
            Title = title;
            YomiGivenName = yomiGivenName;
            YomiSurname = yomiSurname;
            YomiCompanyName = yomiCompanyName;
            Generation = generation;
            EmailAddresses = emailAddresses;
            Websites = websites;
            ImAddresses = imAddresses;
            JobTitle = jobTitle;
            CompanyName = companyName;
            Department = department;
            OfficeLocation = officeLocation;
            Profession = profession;
            AssistantName = assistantName;
            Manager = manager;
            Phones = phones;
            PostalAddresses = postalAddresses;
            SpouseName = spouseName;
            PersonalNotes = personalNotes;
            Children = children;
            WeddingAnniversary = weddingAnniversary;
            Gender = gender;
            IsFavorite = isFavorite;
            Flag = flag;
            SingleValueExtendedProperties = singleValueExtendedProperties;
            MultiValueExtendedProperties = multiValueExtendedProperties;
            Photo = photo;
            Extensions = extensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentFolderId")]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "birthday")]
        public System.DateTime? Birthday { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileAs")]
        public string FileAs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "givenName")]
        public string GivenName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "initials")]
        public string Initials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nickName")]
        public string NickName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "surname")]
        public string Surname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "yomiGivenName")]
        public string YomiGivenName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "yomiSurname")]
        public string YomiSurname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "yomiCompanyName")]
        public string YomiCompanyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "generation")]
        public string Generation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "emailAddresses")]
        public IList<MicrosoftgraphtypedEmailAddress> EmailAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "websites")]
        public IList<Microsoftgraphwebsite> Websites { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imAddresses")]
        public IList<string> ImAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobTitle")]
        public string JobTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "department")]
        public string Department { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "officeLocation")]
        public string OfficeLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "profession")]
        public string Profession { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assistantName")]
        public string AssistantName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manager")]
        public string Manager { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phones")]
        public IList<Microsoftgraphphone> Phones { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postalAddresses")]
        public IList<MicrosoftgraphphysicalAddress> PostalAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "spouseName")]
        public string SpouseName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "personalNotes")]
        public string PersonalNotes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<string> Children { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "weddingAnniversary")]
        public System.DateTime? WeddingAnniversary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gender")]
        public string Gender { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFavorite")]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flag")]
        public MicrosoftgraphfollowupFlag Flag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "singleValueExtendedProperties")]
        public IList<MicrosoftgraphsingleValueLegacyExtendedProperty> SingleValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiValueExtendedProperties")]
        public IList<MicrosoftgraphmultiValueLegacyExtendedProperty> MultiValueExtendedProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "photo")]
        public MicrosoftgraphprofilePhoto Photo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<Microsoftgraphextension> Extensions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Photo != null)
            {
                Photo.Validate();
            }
        }
    }
}
