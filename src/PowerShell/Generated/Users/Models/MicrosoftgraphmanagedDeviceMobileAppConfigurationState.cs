// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MicrosoftgraphmanagedDeviceMobileAppConfigurationState
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphmanagedDeviceMobileAppConfigurationState class.
        /// </summary>
        public MicrosoftgraphmanagedDeviceMobileAppConfigurationState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphmanagedDeviceMobileAppConfigurationState class.
        /// </summary>
        /// <param name="displayName">The name of the policy for this
        /// policyBase</param>
        /// <param name="version">The version of the policy</param>
        /// <param name="platformType">Possible values include: 'android',
        /// 'androidForWork', 'iOS', 'macOS', 'windowsPhone81',
        /// 'windows81AndLater', 'windows10AndLater', 'androidWorkProfile',
        /// 'all'</param>
        /// <param name="state">Possible values include: 'unknown',
        /// 'notApplicable', 'compliant', 'remediated', 'nonCompliant',
        /// 'error', 'conflict', 'notAssigned'</param>
        /// <param name="settingCount">Count of how many setting a policy
        /// holds</param>
        /// <param name="userId">User unique identifier, must be Guid</param>
        /// <param name="userPrincipalName">User Principal Name</param>
        public MicrosoftgraphmanagedDeviceMobileAppConfigurationState(string id = default(string), string displayName = default(string), int? version = default(int?), string platformType = default(string), string state = default(string), int? settingCount = default(int?), string userId = default(string), string userPrincipalName = default(string))
        {
            Id = id;
            DisplayName = displayName;
            Version = version;
            PlatformType = platformType;
            State = state;
            SettingCount = settingCount;
            UserId = userId;
            UserPrincipalName = userPrincipalName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the policy for this policyBase
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the version of the policy
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'android', 'androidForWork',
        /// 'iOS', 'macOS', 'windowsPhone81', 'windows81AndLater',
        /// 'windows10AndLater', 'androidWorkProfile', 'all'
        /// </summary>
        [JsonProperty(PropertyName = "platformType")]
        public string PlatformType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'notApplicable',
        /// 'compliant', 'remediated', 'nonCompliant', 'error', 'conflict',
        /// 'notAssigned'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets count of how many setting a policy holds
        /// </summary>
        [JsonProperty(PropertyName = "settingCount")]
        public int? SettingCount { get; set; }

        /// <summary>
        /// Gets or sets user unique identifier, must be Guid
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets user Principal Name
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Version > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Version", 2147483647);
            }
            if (Version < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Version", -2147483648);
            }
            if (SettingCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "SettingCount", 2147483647);
            }
            if (SettingCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SettingCount", -2147483648);
            }
        }
    }
}
