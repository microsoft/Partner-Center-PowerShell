// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// photo
    /// </summary>
    public partial class Microsoftgraphphoto
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphphoto class.
        /// </summary>
        public Microsoftgraphphoto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphphoto class.
        /// </summary>
        public Microsoftgraphphoto(string cameraMake = default(string), string cameraModel = default(string), double? exposureDenominator = default(double?), double? exposureNumerator = default(double?), double? fNumber = default(double?), double? focalLength = default(double?), int? iso = default(int?), int? orientation = default(int?), System.DateTime? takenDateTime = default(System.DateTime?))
        {
            CameraMake = cameraMake;
            CameraModel = cameraModel;
            ExposureDenominator = exposureDenominator;
            ExposureNumerator = exposureNumerator;
            FNumber = fNumber;
            FocalLength = focalLength;
            Iso = iso;
            Orientation = orientation;
            TakenDateTime = takenDateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cameraMake")]
        public string CameraMake { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cameraModel")]
        public string CameraModel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exposureDenominator")]
        public double? ExposureDenominator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exposureNumerator")]
        public double? ExposureNumerator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fNumber")]
        public double? FNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "focalLength")]
        public double? FocalLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "iso")]
        public int? Iso { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orientation")]
        public int? Orientation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "takenDateTime")]
        public System.DateTime? TakenDateTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Iso > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Iso", 2147483647);
            }
            if (Iso < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Iso", -2147483648);
            }
            if (Orientation > 32767)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Orientation", 32767);
            }
            if (Orientation < -32768)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Orientation", -32768);
            }
        }
    }
}
