// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// messageRuleActions
    /// </summary>
    public partial class MicrosoftgraphmessageRuleActions
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphmessageRuleActions
        /// class.
        /// </summary>
        public MicrosoftgraphmessageRuleActions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphmessageRuleActions
        /// class.
        /// </summary>
        /// <param name="markImportance">Possible values include: 'low',
        /// 'normal', 'high'</param>
        public MicrosoftgraphmessageRuleActions(string moveToFolder = default(string), string copyToFolder = default(string), bool? delete = default(bool?), bool? permanentDelete = default(bool?), bool? markAsRead = default(bool?), string markImportance = default(string), IList<Microsoftgraphrecipient> forwardTo = default(IList<Microsoftgraphrecipient>), IList<Microsoftgraphrecipient> forwardAsAttachmentTo = default(IList<Microsoftgraphrecipient>), IList<Microsoftgraphrecipient> redirectTo = default(IList<Microsoftgraphrecipient>), IList<string> assignCategories = default(IList<string>), bool? stopProcessingRules = default(bool?))
        {
            MoveToFolder = moveToFolder;
            CopyToFolder = copyToFolder;
            Delete = delete;
            PermanentDelete = permanentDelete;
            MarkAsRead = markAsRead;
            MarkImportance = markImportance;
            ForwardTo = forwardTo;
            ForwardAsAttachmentTo = forwardAsAttachmentTo;
            RedirectTo = redirectTo;
            AssignCategories = assignCategories;
            StopProcessingRules = stopProcessingRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moveToFolder")]
        public string MoveToFolder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "copyToFolder")]
        public string CopyToFolder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "delete")]
        public bool? Delete { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permanentDelete")]
        public bool? PermanentDelete { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "markAsRead")]
        public bool? MarkAsRead { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "markImportance")]
        public string MarkImportance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "forwardTo")]
        public IList<Microsoftgraphrecipient> ForwardTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "forwardAsAttachmentTo")]
        public IList<Microsoftgraphrecipient> ForwardAsAttachmentTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "redirectTo")]
        public IList<Microsoftgraphrecipient> RedirectTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignCategories")]
        public IList<string> AssignCategories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stopProcessingRules")]
        public bool? StopProcessingRules { get; set; }

    }
}
