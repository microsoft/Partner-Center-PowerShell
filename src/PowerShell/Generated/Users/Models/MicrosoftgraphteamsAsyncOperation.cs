// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MicrosoftgraphteamsAsyncOperation
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphteamsAsyncOperation
        /// class.
        /// </summary>
        public MicrosoftgraphteamsAsyncOperation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphteamsAsyncOperation
        /// class.
        /// </summary>
        /// <param name="operationType">Possible values include: 'invalid',
        /// 'cloneTeam', 'archiveTeam', 'unarchiveTeam', 'createTeam',
        /// 'unknownFutureValue'</param>
        /// <param name="status">Possible values include: 'invalid',
        /// 'notStarted', 'inProgress', 'succeeded', 'failed',
        /// 'unknownFutureValue'</param>
        public MicrosoftgraphteamsAsyncOperation(string id = default(string), string operationType = default(string), System.DateTime? createdDateTime = default(System.DateTime?), string status = default(string), System.DateTime? lastActionDateTime = default(System.DateTime?), int? attemptsCount = default(int?), string targetResourceId = default(string), string targetResourceLocation = default(string), MicrosoftgraphoperationError error = default(MicrosoftgraphoperationError))
        {
            Id = id;
            OperationType = operationType;
            CreatedDateTime = createdDateTime;
            Status = status;
            LastActionDateTime = lastActionDateTime;
            AttemptsCount = attemptsCount;
            TargetResourceId = targetResourceId;
            TargetResourceLocation = targetResourceLocation;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'invalid', 'cloneTeam',
        /// 'archiveTeam', 'unarchiveTeam', 'createTeam', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "operationType")]
        public string OperationType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'invalid', 'notStarted',
        /// 'inProgress', 'succeeded', 'failed', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastActionDateTime")]
        public System.DateTime? LastActionDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attemptsCount")]
        public int? AttemptsCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceId")]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceLocation")]
        public string TargetResourceLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public MicrosoftgraphoperationError Error { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AttemptsCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "AttemptsCount", 2147483647);
            }
            if (AttemptsCount < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AttemptsCount", -2147483648);
            }
        }
    }
}
