// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// messageRule
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphMessageruleallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphMessageruleallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphMessageruleallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphMessageruleallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphMessageruleallof1(string displayName = default(string), int? sequence = default(int?), MicrosoftgraphmessageRulePredicates conditions = default(MicrosoftgraphmessageRulePredicates), MicrosoftgraphmessageRuleActions actions = default(MicrosoftgraphmessageRuleActions), MicrosoftgraphmessageRulePredicates exceptions = default(MicrosoftgraphmessageRulePredicates), bool? isEnabled = default(bool?), bool? hasError = default(bool?), bool? isReadOnly = default(bool?))
        {
            DisplayName = displayName;
            Sequence = sequence;
            Conditions = conditions;
            Actions = actions;
            Exceptions = exceptions;
            IsEnabled = isEnabled;
            HasError = hasError;
            IsReadOnly = isReadOnly;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sequence")]
        public int? Sequence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public MicrosoftgraphmessageRulePredicates Conditions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        public MicrosoftgraphmessageRuleActions Actions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exceptions")]
        public MicrosoftgraphmessageRulePredicates Exceptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasError")]
        public bool? HasError { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReadOnly")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sequence > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Sequence", 2147483647);
            }
            if (Sequence < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Sequence", -2147483648);
            }
            if (Conditions != null)
            {
                Conditions.Validate();
            }
            if (Exceptions != null)
            {
                Exceptions.Validate();
            }
        }
    }
}
