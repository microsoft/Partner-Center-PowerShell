// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Store.PartnerCenter.PowerShell.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// signIn
    /// </summary>
    public partial class ComponentsschemasmicrosoftGraphSigninallof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphSigninallof1 class.
        /// </summary>
        public ComponentsschemasmicrosoftGraphSigninallof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ComponentsschemasmicrosoftGraphSigninallof1 class.
        /// </summary>
        /// <param name="conditionalAccessStatus">Possible values include:
        /// 'success', 'failure', 'notApplied', 'unknownFutureValue'</param>
        /// <param name="riskDetail">Possible values include: 'none',
        /// 'adminGeneratedTemporaryPassword',
        /// 'userPerformedSecuredPasswordChange',
        /// 'userPerformedSecuredPasswordReset', 'adminConfirmedSigninSafe',
        /// 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy',
        /// 'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised',
        /// 'hidden', 'adminConfirmedUserCompromised',
        /// 'unknownFutureValue'</param>
        /// <param name="riskLevelAggregated">Possible values include: 'low',
        /// 'medium', 'high', 'hidden', 'none', 'unknownFutureValue'</param>
        /// <param name="riskLevelDuringSignIn">Possible values include: 'low',
        /// 'medium', 'high', 'hidden', 'none', 'unknownFutureValue'</param>
        /// <param name="riskState">Possible values include: 'none',
        /// 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
        /// 'confirmedCompromised', 'unknownFutureValue'</param>
        /// <param name="tokenIssuerType">Possible values include: 'AzureAD',
        /// 'ADFederationServices', 'UnknownFutureValue'</param>
        public ComponentsschemasmicrosoftGraphSigninallof1(string alternateSignInName = default(string), string appDisplayName = default(string), string appId = default(string), IList<MicrosoftgraphappliedConditionalAccessPolicy> appliedConditionalAccessPolicies = default(IList<MicrosoftgraphappliedConditionalAccessPolicy>), IList<MicrosoftgraphauthenticationDetail> authenticationDetails = default(IList<MicrosoftgraphauthenticationDetail>), IList<string> authenticationMethodsUsed = default(IList<string>), IList<MicrosoftgraphkeyValue> authenticationProcessingDetails = default(IList<MicrosoftgraphkeyValue>), IList<MicrosoftgraphauthenticationRequirementPolicy> authenticationRequirementPolicies = default(IList<MicrosoftgraphauthenticationRequirementPolicy>), string clientAppUsed = default(string), string conditionalAccessStatus = default(string), string correlationId = default(string), System.DateTime? createdDateTime = default(System.DateTime?), MicrosoftgraphdeviceDetail deviceDetail = default(MicrosoftgraphdeviceDetail), bool? isInteractive = default(bool?), string ipAddress = default(string), MicrosoftgraphsignInLocation location = default(MicrosoftgraphsignInLocation), MicrosoftgraphmfaDetail mfaDetail = default(MicrosoftgraphmfaDetail), IList<MicrosoftgraphnetworkLocationDetail> networkLocationDetails = default(IList<MicrosoftgraphnetworkLocationDetail>), string originalRequestId = default(string), int? processingTimeInMilliseconds = default(int?), string riskDetail = default(string), IList<string> riskEventTypes = default(IList<string>), string riskLevelAggregated = default(string), string riskLevelDuringSignIn = default(string), string riskState = default(string), string resourceDisplayName = default(string), string resourceId = default(string), string servicePrincipalId = default(string), string servicePrincipalName = default(string), MicrosoftgraphsignInStatus status = default(MicrosoftgraphsignInStatus), string tokenIssuerName = default(string), string tokenIssuerType = default(string), string userAgent = default(string), string userDisplayName = default(string), string userId = default(string), string userPrincipalName = default(string))
        {
            AlternateSignInName = alternateSignInName;
            AppDisplayName = appDisplayName;
            AppId = appId;
            AppliedConditionalAccessPolicies = appliedConditionalAccessPolicies;
            AuthenticationDetails = authenticationDetails;
            AuthenticationMethodsUsed = authenticationMethodsUsed;
            AuthenticationProcessingDetails = authenticationProcessingDetails;
            AuthenticationRequirementPolicies = authenticationRequirementPolicies;
            ClientAppUsed = clientAppUsed;
            ConditionalAccessStatus = conditionalAccessStatus;
            CorrelationId = correlationId;
            CreatedDateTime = createdDateTime;
            DeviceDetail = deviceDetail;
            IsInteractive = isInteractive;
            IpAddress = ipAddress;
            Location = location;
            MfaDetail = mfaDetail;
            NetworkLocationDetails = networkLocationDetails;
            OriginalRequestId = originalRequestId;
            ProcessingTimeInMilliseconds = processingTimeInMilliseconds;
            RiskDetail = riskDetail;
            RiskEventTypes = riskEventTypes;
            RiskLevelAggregated = riskLevelAggregated;
            RiskLevelDuringSignIn = riskLevelDuringSignIn;
            RiskState = riskState;
            ResourceDisplayName = resourceDisplayName;
            ResourceId = resourceId;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalName = servicePrincipalName;
            Status = status;
            TokenIssuerName = tokenIssuerName;
            TokenIssuerType = tokenIssuerType;
            UserAgent = userAgent;
            UserDisplayName = userDisplayName;
            UserId = userId;
            UserPrincipalName = userPrincipalName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alternateSignInName")]
        public string AlternateSignInName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appDisplayName")]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appId")]
        public string AppId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appliedConditionalAccessPolicies")]
        public IList<MicrosoftgraphappliedConditionalAccessPolicy> AppliedConditionalAccessPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authenticationDetails")]
        public IList<MicrosoftgraphauthenticationDetail> AuthenticationDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authenticationMethodsUsed")]
        public IList<string> AuthenticationMethodsUsed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authenticationProcessingDetails")]
        public IList<MicrosoftgraphkeyValue> AuthenticationProcessingDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authenticationRequirementPolicies")]
        public IList<MicrosoftgraphauthenticationRequirementPolicy> AuthenticationRequirementPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clientAppUsed")]
        public string ClientAppUsed { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'success', 'failure',
        /// 'notApplied', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "conditionalAccessStatus")]
        public string ConditionalAccessStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceDetail")]
        public MicrosoftgraphdeviceDetail DeviceDetail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInteractive")]
        public bool? IsInteractive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public MicrosoftgraphsignInLocation Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mfaDetail")]
        public MicrosoftgraphmfaDetail MfaDetail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "networkLocationDetails")]
        public IList<MicrosoftgraphnetworkLocationDetail> NetworkLocationDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originalRequestId")]
        public string OriginalRequestId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processingTimeInMilliseconds")]
        public int? ProcessingTimeInMilliseconds { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none',
        /// 'adminGeneratedTemporaryPassword',
        /// 'userPerformedSecuredPasswordChange',
        /// 'userPerformedSecuredPasswordReset', 'adminConfirmedSigninSafe',
        /// 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy',
        /// 'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised',
        /// 'hidden', 'adminConfirmedUserCompromised', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "riskDetail")]
        public string RiskDetail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "riskEventTypes")]
        public IList<string> RiskEventTypes { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'medium', 'high',
        /// 'hidden', 'none', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "riskLevelAggregated")]
        public string RiskLevelAggregated { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'medium', 'high',
        /// 'hidden', 'none', 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "riskLevelDuringSignIn")]
        public string RiskLevelDuringSignIn { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'confirmedSafe',
        /// 'remediated', 'dismissed', 'atRisk', 'confirmedCompromised',
        /// 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "riskState")]
        public string RiskState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resourceDisplayName")]
        public string ResourceDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipalId")]
        public string ServicePrincipalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipalName")]
        public string ServicePrincipalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public MicrosoftgraphsignInStatus Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tokenIssuerName")]
        public string TokenIssuerName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AzureAD',
        /// 'ADFederationServices', 'UnknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "tokenIssuerType")]
        public string TokenIssuerType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userAgent")]
        public string UserAgent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userDisplayName")]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userPrincipalName")]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProcessingTimeInMilliseconds > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ProcessingTimeInMilliseconds", 2147483647);
            }
            if (ProcessingTimeInMilliseconds < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ProcessingTimeInMilliseconds", -2147483648);
            }
            if (Status != null)
            {
                Status.Validate();
            }
        }
    }
}
