strategy:
  matrix:
    Linux:
      imageName: 'ubuntu-latest'
    macOS:
      imageName: 'macOS-latest'
    Windows:
      imageName: 'windows-latest'

trigger:
- master

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: 'Release'

steps:
- task: CredScan@2
  displayName: CredScan
  inputs:
    toolMajorVersion: 'V2'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: PoliCheck@1
  displayName: PoliCheck
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: UseDotNet@2
  displayName: 'Use .NET Core 3.1'
  inputs:
    packageType: sdk
    version: 3.1.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:Build /p:Configuration=$(buildConfiguration)'

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0 
  displayName: 'Component Detection'

- pwsh: 'Install-Module platyPS -Force -Confirm:$false -Scope CurrentUser'
  displayName: 'Install platyPS'

- task: DotNetCoreCLI@2
  displayName: 'Generate Help'
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:GenerateHelp /p:Configuration=$(buildConfiguration)'

- pwsh: 'Test-ModuleManifest .\artifacts\$(buildConfiguration)\PartnerCenter.psd1'
  displayName: 'Validate Manifest'

- task: BinSkim@3
  displayName: BinSkim
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    AnalyzeTarget: 'artifacts\$(buildConfiguration)\*.dll;'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
  displayName: 'Post Analysis'
  inputs:
    BinSkim: true
    CredScan: true
    PoliCheck: true
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: UseDotNet@2
  displayName: 'Use .NET Core 2.2'
  inputs:
    packageType: sdk
    version: 2.2.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

#- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
#  displayName: 'ESRP code signing'
#  inputs:
#    ConnectedServiceName: 'esrp-partner-center-powershell'
#    FolderPath: 'artifacts\$(buildConfiguration)'
#    Pattern: 'Microsoft.Store.PartnerCenter.dll,Microsoft.Store.PartnerCenter.PowerShell.dll,Microsoft.Azure.Management.*.dll,Microsoft.Graph.*.dll,*.ps1xml,*.psd1, *.psm1'
#    signConfigType: inlineSignParams
#    inlineOperation: |
#     [
#         {
#             "keyCode": "CP-230012",
#             "operationSetCode": "SigntoolSign",
#             "parameters": [
#             {
#                 "parameterName": "OpusName",
#                 "parameterValue": "Microsoft"
#             },
#             {
#                 "parameterName": "OpusInfo",
#                 "parameterValue": "http://www.microsoft.com"
#             },
#             {
#                 "parameterName": "FileDigest",
#                 "parameterValue": "/fd \"SHA256\""
#             },
#             {
#                 "parameterName": "PageHash",
#                 "parameterValue": "/NPH"
#             },
#             {
#                 "parameterName": "TimeStamp",
#                 "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
#             }
#             ],
#             "toolName": "sign",
#             "toolVersion": "1.0"
#         },
#         {
#             "keyCode": "CP-230012",
#             "operationSetCode": "SigntoolVerify",
#             "parameters": [ ],
#            "toolName": "sign",
#             "toolVersion": "1.0"
#         }
#     ]
#  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: DeleteFiles@1
  displayName: Delete the code sign summary file
  inputs:
    SourceFolder: '$(system.DefaultWorkingDirectory)'
    Contents: '**\CodeSignSummary-*.md'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: CopyFiles@2
  displayName: 'Copy artifacts directory to $(build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(system.DefaultWorkingDirectory)'
    Contents: 'artifacts\**'
    TargetFolder: '$(build.ArtifactStagingDirectory)\'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: CopyFiles@2
  displayName: 'Copy build directory to $(build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(system.DefaultWorkingDirectory)'
    Contents: 'build\**'
    TargetFolder: '$(build.ArtifactStagingDirectory)\'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.ArtifactStagingDirectory)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  