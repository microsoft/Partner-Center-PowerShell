strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.13'
    windows:
      imageName: 'Windows-2019'

trigger:
- master

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: 'Release'

steps:
- task: CredScan@2
  displayName: CredScan
  inputs:
    toolMajorVersion: 'V2'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PoliCheck@1
  displayName: PoliCheck
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:Build /p:Configuration=$(buildConfiguration)'

- pwsh: 'Install-Module platyPS -Force -Confirm:$false -Scope CurrentUser'
  displayName: 'Install platyPS'

- task: DotNetCoreCLI@2
  displayName: 'Generate Help'
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:GenerateHelp /p:Configuration=$(buildConfiguration)'

- pwsh: 'Test-ModuleManifest .\artifacts\$(buildConfiguration)\PartnerCenter.psd1'
  displayName: 'Validate Manifest'

- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: Strong name signing the assemblies
  inputs:
    ConnectedServiceName: esrp-partner-center-powershell
    FolderPath: 'artifacts\$(buildConfiguration)'
    Pattern: 'Microsoft.Store.PartnerCenter.dll,Microsoft.Store.PartnerCenter.PowerShell.dll'
    signConfigType: inlineSignParams
    inlineOperation: |
      [
        {
          "keyCode": "CP-235845-SN",
          "operationSetCode": "StrongNameSign",
          "parameters": [],
          "toolName": "sign",
          "toolVersion": "1.0"
        },
        {
          "keyCode": "CP-235845-SN",
          "operationSetCode": "StrongNameVerify",
          "parameters": [],
          "toolName": "sign",
          "toolVersion": "1.0"
        }
      ]
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))


- task: CopyFiles@2
  displayName: 'Copy artifacts directory to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: 'artifacts\**'
    TargetFolder: '$(build.artifactstagingdirectory)\'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: CopyFiles@2
  displayName: 'Copy build directory to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: 'build\**'
    TargetFolder: '$(build.artifactstagingdirectory)\'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))